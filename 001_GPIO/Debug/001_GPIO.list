
001_GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001590  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08001720  08001720  00011720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800175c  0800175c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  0800175c  0800175c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800175c  0800175c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800175c  0800175c  0001175c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001760  08001760  00011760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001764  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          0000016c  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001425  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000578  00000000  00000000  000214f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000001a0  00000000  00000000  00021a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000122  00000000  00000000  00021c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002f62  00000000  00000000  00021d32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001d7b  00000000  00000000  00024c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000b050  00000000  00000000  00026a0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000d30  00000000  00000000  00031a60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  00032790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001708 	.word	0x08001708

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08001708 	.word	0x08001708

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <GPIO_Init>:
 *
 * @return : None
 *
 *****************************************************************************/
void GPIO_Init(GPIO_Handle_t* ptGpioHandle)
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	uint32_t uiRegVal = 0;
 8000278:	2300      	movs	r3, #0
 800027a:	60fb      	str	r3, [r7, #12]
	if(NULL != ptGpioHandle)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b00      	cmp	r3, #0
 8000280:	f000 80e3 	beq.w	800044a <GPIO_Init+0x1da>
	{
		/* Configure the Mode of the GPIO Pin. */
		/* Mode configuration for non interrupt mode. */
		if(ptGpioHandle->GpioPinConfig.GPIO_PinMode <= eGPIO_AnalogMode)
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	795b      	ldrb	r3, [r3, #5]
 8000288:	2b03      	cmp	r3, #3
 800028a:	d820      	bhi.n	80002ce <GPIO_Init+0x5e>
		{
			/* Calculate the register value. */
			uiRegVal = (ptGpioHandle->GpioPinConfig.GPIO_PinMode <<
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	795b      	ldrb	r3, [r3, #5]
 8000290:	461a      	mov	r2, r3
					   (2 * ptGpioHandle->GpioPinConfig.GPIO_PinNumber));
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	791b      	ldrb	r3, [r3, #4]
 8000296:	005b      	lsls	r3, r3, #1
			uiRegVal = (ptGpioHandle->GpioPinConfig.GPIO_PinMode <<
 8000298:	fa02 f303 	lsl.w	r3, r2, r3
 800029c:	60fb      	str	r3, [r7, #12]

			/* CClear the actual register. */
			ptGpioHandle->pGPIOx->MODER &= (0x3 << ptGpioHandle->GpioPinConfig.GPIO_PinNumber);
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	681a      	ldr	r2, [r3, #0]
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	791b      	ldrb	r3, [r3, #4]
 80002a8:	4619      	mov	r1, r3
 80002aa:	2303      	movs	r3, #3
 80002ac:	408b      	lsls	r3, r1
 80002ae:	4619      	mov	r1, r3
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	400a      	ands	r2, r1
 80002b6:	601a      	str	r2, [r3, #0]

			/* Copy the register value to actual register. */
			ptGpioHandle->pGPIOx->MODER |= uiRegVal;
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	6819      	ldr	r1, [r3, #0]
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	68fa      	ldr	r2, [r7, #12]
 80002c4:	430a      	orrs	r2, r1
 80002c6:	601a      	str	r2, [r3, #0]

			/* Reset The temporary register. */
			uiRegVal = 0;
 80002c8:	2300      	movs	r3, #0
 80002ca:	60fb      	str	r3, [r7, #12]
 80002cc:	e002      	b.n	80002d4 <GPIO_Init+0x64>
		}

		/* Mode configuration for interrupt mode. */
		else if(ptGpioHandle->GpioPinConfig.GPIO_PinMode > eGPIO_AnalogMode &&
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	795b      	ldrb	r3, [r3, #5]
 80002d2:	2b03      	cmp	r3, #3
		{

		}

		/* Configure the Speed of the GPIO pin. */
		if(ptGpioHandle->GpioPinConfig.GPIO_PinSpeed < eGPIO_SpeedTypeMax)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	799b      	ldrb	r3, [r3, #6]
 80002d8:	2b03      	cmp	r3, #3
 80002da:	d820      	bhi.n	800031e <GPIO_Init+0xae>
		{
			/* Calculate the register value. */
			uiRegVal = (ptGpioHandle->GpioPinConfig.GPIO_PinSpeed <<
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	799b      	ldrb	r3, [r3, #6]
 80002e0:	461a      	mov	r2, r3
					   (2 * ptGpioHandle->GpioPinConfig.GPIO_PinNumber));
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	791b      	ldrb	r3, [r3, #4]
 80002e6:	005b      	lsls	r3, r3, #1
			uiRegVal = (ptGpioHandle->GpioPinConfig.GPIO_PinSpeed <<
 80002e8:	fa02 f303 	lsl.w	r3, r2, r3
 80002ec:	60fb      	str	r3, [r7, #12]

			/* CClear the actual register. */
			ptGpioHandle->pGPIOx->OSPEEDR &= ~(0x3 << ptGpioHandle->GpioPinConfig.GPIO_PinNumber);
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	689a      	ldr	r2, [r3, #8]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	791b      	ldrb	r3, [r3, #4]
 80002f8:	4619      	mov	r1, r3
 80002fa:	2303      	movs	r3, #3
 80002fc:	408b      	lsls	r3, r1
 80002fe:	43db      	mvns	r3, r3
 8000300:	4619      	mov	r1, r3
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	400a      	ands	r2, r1
 8000308:	609a      	str	r2, [r3, #8]

			/* Copy the register value to actual register. */
			ptGpioHandle->pGPIOx->OSPEEDR |= uiRegVal;
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	6899      	ldr	r1, [r3, #8]
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	68fa      	ldr	r2, [r7, #12]
 8000316:	430a      	orrs	r2, r1
 8000318:	609a      	str	r2, [r3, #8]

			/* Reset The temporary register. */
			uiRegVal = 0;
 800031a:	2300      	movs	r3, #0
 800031c:	60fb      	str	r3, [r7, #12]
		}

		/* Configure the PUPD settings. */
		if(ptGpioHandle->GpioPinConfig.GPIO_PinPuPdCtrl < eGPIO_PudPdMax)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	79db      	ldrb	r3, [r3, #7]
 8000322:	2b03      	cmp	r3, #3
 8000324:	d820      	bhi.n	8000368 <GPIO_Init+0xf8>
		{
			/* Calculate the register value. */
			uiRegVal = (ptGpioHandle->GpioPinConfig.GPIO_PinPuPdCtrl <<
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	79db      	ldrb	r3, [r3, #7]
 800032a:	461a      	mov	r2, r3
					   (2 * ptGpioHandle->GpioPinConfig.GPIO_PinNumber));
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	791b      	ldrb	r3, [r3, #4]
 8000330:	005b      	lsls	r3, r3, #1
			uiRegVal = (ptGpioHandle->GpioPinConfig.GPIO_PinPuPdCtrl <<
 8000332:	fa02 f303 	lsl.w	r3, r2, r3
 8000336:	60fb      	str	r3, [r7, #12]

			/* CClear the actual register. */
			ptGpioHandle->pGPIOx->PUPDR &= ~(0x3 << ptGpioHandle->GpioPinConfig.GPIO_PinNumber);
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	68da      	ldr	r2, [r3, #12]
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	791b      	ldrb	r3, [r3, #4]
 8000342:	4619      	mov	r1, r3
 8000344:	2303      	movs	r3, #3
 8000346:	408b      	lsls	r3, r1
 8000348:	43db      	mvns	r3, r3
 800034a:	4619      	mov	r1, r3
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	400a      	ands	r2, r1
 8000352:	60da      	str	r2, [r3, #12]

			/* Copy the register value to actual register. */
			ptGpioHandle->pGPIOx->PUPDR |= uiRegVal;
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	68d9      	ldr	r1, [r3, #12]
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	68fa      	ldr	r2, [r7, #12]
 8000360:	430a      	orrs	r2, r1
 8000362:	60da      	str	r2, [r3, #12]

			/* Reset The temporary register. */
			uiRegVal = 0;
 8000364:	2300      	movs	r3, #0
 8000366:	60fb      	str	r3, [r7, #12]
		}

		/* Configure the output type. */
		if(ptGpioHandle->GpioPinConfig.GPIO_PinOpType < eGPIO_OpTypeMax)
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	7a1b      	ldrb	r3, [r3, #8]
 800036c:	2b01      	cmp	r3, #1
 800036e:	d81f      	bhi.n	80003b0 <GPIO_Init+0x140>
		{
			/* Calculate the register value. */
			uiRegVal = (ptGpioHandle->GpioPinConfig.GPIO_PinOpType <<
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	7a1b      	ldrb	r3, [r3, #8]
 8000374:	461a      	mov	r2, r3
					   (ptGpioHandle->GpioPinConfig.GPIO_PinNumber));
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	791b      	ldrb	r3, [r3, #4]
			uiRegVal = (ptGpioHandle->GpioPinConfig.GPIO_PinOpType <<
 800037a:	fa02 f303 	lsl.w	r3, r2, r3
 800037e:	60fb      	str	r3, [r7, #12]

			/* CClear the actual register. */
			ptGpioHandle->pGPIOx->OTYPER &= ~(0x1 << ptGpioHandle->GpioPinConfig.GPIO_PinNumber);
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	685a      	ldr	r2, [r3, #4]
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	791b      	ldrb	r3, [r3, #4]
 800038a:	4619      	mov	r1, r3
 800038c:	2301      	movs	r3, #1
 800038e:	408b      	lsls	r3, r1
 8000390:	43db      	mvns	r3, r3
 8000392:	4619      	mov	r1, r3
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	400a      	ands	r2, r1
 800039a:	605a      	str	r2, [r3, #4]

			/* Copy the register value to actual register. */
			ptGpioHandle->pGPIOx->OTYPER |= uiRegVal;
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	6859      	ldr	r1, [r3, #4]
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	68fa      	ldr	r2, [r7, #12]
 80003a8:	430a      	orrs	r2, r1
 80003aa:	605a      	str	r2, [r3, #4]

			/* Reset The temporary register. */
			uiRegVal = 0;
 80003ac:	2300      	movs	r3, #0
 80003ae:	60fb      	str	r3, [r7, #12]
		}

		/* Configure the alternate functionality. */
		if(ptGpioHandle->GpioPinConfig.GPIO_PinMode == eGPIO_AfMode)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	795b      	ldrb	r3, [r3, #5]
 80003b4:	2b02      	cmp	r3, #2
 80003b6:	d148      	bne.n	800044a <GPIO_Init+0x1da>
		{
			uint8_t ucPinNumber = 0;
 80003b8:	2300      	movs	r3, #0
 80003ba:	72fb      	strb	r3, [r7, #11]

			ucPinNumber = (ptGpioHandle->GpioPinConfig.GPIO_PinNumber % 8);
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	791b      	ldrb	r3, [r3, #4]
 80003c0:	f003 0307 	and.w	r3, r3, #7
 80003c4:	72fb      	strb	r3, [r7, #11]
			/* Calculate the register value. */
			uiRegVal = (ptGpioHandle->GpioPinConfig.GPIO_PinAltFunMode << (4 * ucPinNumber));
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	7a5b      	ldrb	r3, [r3, #9]
 80003ca:	461a      	mov	r2, r3
 80003cc:	7afb      	ldrb	r3, [r7, #11]
 80003ce:	009b      	lsls	r3, r3, #2
 80003d0:	fa02 f303 	lsl.w	r3, r2, r3
 80003d4:	60fb      	str	r3, [r7, #12]

			/* Check the Pin belongs to AFRL. */
			if(ptGpioHandle->GpioPinConfig.GPIO_PinNumber >= eGPIO_PIN_0 &&
			 ptGpioHandle->GpioPinConfig.GPIO_PinNumber <= eGPIO_PIN_7)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	791b      	ldrb	r3, [r3, #4]
			if(ptGpioHandle->GpioPinConfig.GPIO_PinNumber >= eGPIO_PIN_0 &&
 80003da:	2b07      	cmp	r3, #7
 80003dc:	d815      	bhi.n	800040a <GPIO_Init+0x19a>
			{

				/* CClear the actual register. */
				ptGpioHandle->pGPIOx->AFRL &= ~(0xF << ucPinNumber);
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	6a1a      	ldr	r2, [r3, #32]
 80003e4:	7afb      	ldrb	r3, [r7, #11]
 80003e6:	210f      	movs	r1, #15
 80003e8:	fa01 f303 	lsl.w	r3, r1, r3
 80003ec:	43db      	mvns	r3, r3
 80003ee:	4619      	mov	r1, r3
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	400a      	ands	r2, r1
 80003f6:	621a      	str	r2, [r3, #32]

				/* Copy the register value to actual register. */
				ptGpioHandle->pGPIOx->AFRL |= uiRegVal;
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	6a19      	ldr	r1, [r3, #32]
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	68fa      	ldr	r2, [r7, #12]
 8000404:	430a      	orrs	r2, r1
 8000406:	621a      	str	r2, [r3, #32]
 8000408:	e01c      	b.n	8000444 <GPIO_Init+0x1d4>
			}

			/* Check the Pin belongs to AFRH. */
			else if(ptGpioHandle->GpioPinConfig.GPIO_PinNumber >= eGPIO_PIN_8 &&
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	791b      	ldrb	r3, [r3, #4]
 800040e:	2b07      	cmp	r3, #7
 8000410:	d918      	bls.n	8000444 <GPIO_Init+0x1d4>
			 ptGpioHandle->GpioPinConfig.GPIO_PinNumber < eGPIO_Pin_Max)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	791b      	ldrb	r3, [r3, #4]
			else if(ptGpioHandle->GpioPinConfig.GPIO_PinNumber >= eGPIO_PIN_8 &&
 8000416:	2b0f      	cmp	r3, #15
 8000418:	d814      	bhi.n	8000444 <GPIO_Init+0x1d4>
			{

				/* CClear the actual register. */
				ptGpioHandle->pGPIOx->AFRH &= ~(0xF << ucPinNumber);
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000420:	7afb      	ldrb	r3, [r7, #11]
 8000422:	210f      	movs	r1, #15
 8000424:	fa01 f303 	lsl.w	r3, r1, r3
 8000428:	43db      	mvns	r3, r3
 800042a:	4619      	mov	r1, r3
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	400a      	ands	r2, r1
 8000432:	625a      	str	r2, [r3, #36]	; 0x24

				/* Copy the register value to actual register. */
				ptGpioHandle->pGPIOx->AFRH |= uiRegVal;
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	68fa      	ldr	r2, [r7, #12]
 8000440:	430a      	orrs	r2, r1
 8000442:	625a      	str	r2, [r3, #36]	; 0x24
			}

			/* Reset The temporary register. */
			uiRegVal = 0;
 8000444:	2300      	movs	r3, #0
 8000446:	60fb      	str	r3, [r7, #12]
		}
	}

	return;
 8000448:	bf00      	nop
 800044a:	bf00      	nop
}
 800044c:	3714      	adds	r7, #20
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
	...

08000458 <GPIO_PeriClkCtrl>:
 *
 * @return : None
 *
 *****************************************************************************/
void GPIO_PeriClkCtrl(Gpio_RegDef_t* pGPIOx, uint8_t EnOrDi)
{
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	460b      	mov	r3, r1
 8000462:	70fb      	strb	r3, [r7, #3]
	if(NULL != pGPIOx)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	2b00      	cmp	r3, #0
 8000468:	f000 80b5 	beq.w	80005d6 <GPIO_PeriClkCtrl+0x17e>
	{
		/* Enable The Clock For Corresponding Port. */
		if(ENABLE == EnOrDi)
 800046c:	78fb      	ldrb	r3, [r7, #3]
 800046e:	2b01      	cmp	r3, #1
 8000470:	d156      	bne.n	8000520 <GPIO_PeriClkCtrl+0xc8>
		{
			if(GPIOA == pGPIOx)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000478:	d106      	bne.n	8000488 <GPIO_PeriClkCtrl+0x30>
			{
				GPOIA_PCLK_EN();
 800047a:	4b5a      	ldr	r3, [pc, #360]	; (80005e4 <GPIO_PeriClkCtrl+0x18c>)
 800047c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800047e:	4a59      	ldr	r2, [pc, #356]	; (80005e4 <GPIO_PeriClkCtrl+0x18c>)
 8000480:	f043 0301 	orr.w	r3, r3, #1
 8000484:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000486:	e04b      	b.n	8000520 <GPIO_PeriClkCtrl+0xc8>
			}
			else if(GPIOB == pGPIOx)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4a57      	ldr	r2, [pc, #348]	; (80005e8 <GPIO_PeriClkCtrl+0x190>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d106      	bne.n	800049e <GPIO_PeriClkCtrl+0x46>
			{
				GPOIB_PCLK_EN();
 8000490:	4b54      	ldr	r3, [pc, #336]	; (80005e4 <GPIO_PeriClkCtrl+0x18c>)
 8000492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000494:	4a53      	ldr	r2, [pc, #332]	; (80005e4 <GPIO_PeriClkCtrl+0x18c>)
 8000496:	f043 0302 	orr.w	r3, r3, #2
 800049a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800049c:	e040      	b.n	8000520 <GPIO_PeriClkCtrl+0xc8>
			}
			else if(GPIOC == pGPIOx)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4a52      	ldr	r2, [pc, #328]	; (80005ec <GPIO_PeriClkCtrl+0x194>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d106      	bne.n	80004b4 <GPIO_PeriClkCtrl+0x5c>
			{
				GPOIC_PCLK_EN();
 80004a6:	4b4f      	ldr	r3, [pc, #316]	; (80005e4 <GPIO_PeriClkCtrl+0x18c>)
 80004a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004aa:	4a4e      	ldr	r2, [pc, #312]	; (80005e4 <GPIO_PeriClkCtrl+0x18c>)
 80004ac:	f043 0304 	orr.w	r3, r3, #4
 80004b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004b2:	e035      	b.n	8000520 <GPIO_PeriClkCtrl+0xc8>
			}
			else if(GPIOD == pGPIOx)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	4a4e      	ldr	r2, [pc, #312]	; (80005f0 <GPIO_PeriClkCtrl+0x198>)
 80004b8:	4293      	cmp	r3, r2
 80004ba:	d106      	bne.n	80004ca <GPIO_PeriClkCtrl+0x72>
			{
				GPOID_PCLK_EN();
 80004bc:	4b49      	ldr	r3, [pc, #292]	; (80005e4 <GPIO_PeriClkCtrl+0x18c>)
 80004be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004c0:	4a48      	ldr	r2, [pc, #288]	; (80005e4 <GPIO_PeriClkCtrl+0x18c>)
 80004c2:	f043 0308 	orr.w	r3, r3, #8
 80004c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004c8:	e02a      	b.n	8000520 <GPIO_PeriClkCtrl+0xc8>
			}
			else if(GPIOE == pGPIOx)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4a49      	ldr	r2, [pc, #292]	; (80005f4 <GPIO_PeriClkCtrl+0x19c>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d106      	bne.n	80004e0 <GPIO_PeriClkCtrl+0x88>
			{
				GPOIE_PCLK_EN();
 80004d2:	4b44      	ldr	r3, [pc, #272]	; (80005e4 <GPIO_PeriClkCtrl+0x18c>)
 80004d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d6:	4a43      	ldr	r2, [pc, #268]	; (80005e4 <GPIO_PeriClkCtrl+0x18c>)
 80004d8:	f043 0310 	orr.w	r3, r3, #16
 80004dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004de:	e01f      	b.n	8000520 <GPIO_PeriClkCtrl+0xc8>
			}
			else if(GPIOF == pGPIOx)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	4a45      	ldr	r2, [pc, #276]	; (80005f8 <GPIO_PeriClkCtrl+0x1a0>)
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d106      	bne.n	80004f6 <GPIO_PeriClkCtrl+0x9e>
			{
				GPOIF_PCLK_EN();
 80004e8:	4b3e      	ldr	r3, [pc, #248]	; (80005e4 <GPIO_PeriClkCtrl+0x18c>)
 80004ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ec:	4a3d      	ldr	r2, [pc, #244]	; (80005e4 <GPIO_PeriClkCtrl+0x18c>)
 80004ee:	f043 0320 	orr.w	r3, r3, #32
 80004f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004f4:	e014      	b.n	8000520 <GPIO_PeriClkCtrl+0xc8>
			}
			else if(GPIOG == pGPIOx)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4a40      	ldr	r2, [pc, #256]	; (80005fc <GPIO_PeriClkCtrl+0x1a4>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d106      	bne.n	800050c <GPIO_PeriClkCtrl+0xb4>
			{
				GPOIG_PCLK_EN();
 80004fe:	4b39      	ldr	r3, [pc, #228]	; (80005e4 <GPIO_PeriClkCtrl+0x18c>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000502:	4a38      	ldr	r2, [pc, #224]	; (80005e4 <GPIO_PeriClkCtrl+0x18c>)
 8000504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000508:	64d3      	str	r3, [r2, #76]	; 0x4c
 800050a:	e009      	b.n	8000520 <GPIO_PeriClkCtrl+0xc8>
			}
			else if(GPIOH == pGPIOx)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	4a3c      	ldr	r2, [pc, #240]	; (8000600 <GPIO_PeriClkCtrl+0x1a8>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d105      	bne.n	8000520 <GPIO_PeriClkCtrl+0xc8>
			{
				GPOIH_PCLK_EN();
 8000514:	4b33      	ldr	r3, [pc, #204]	; (80005e4 <GPIO_PeriClkCtrl+0x18c>)
 8000516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000518:	4a32      	ldr	r2, [pc, #200]	; (80005e4 <GPIO_PeriClkCtrl+0x18c>)
 800051a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800051e:	64d3      	str	r3, [r2, #76]	; 0x4c
			}
		}

		if(DISABLE == EnOrDi)
 8000520:	78fb      	ldrb	r3, [r7, #3]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d157      	bne.n	80005d6 <GPIO_PeriClkCtrl+0x17e>
		{
			/* Disable The Clock For Corresponding Port. */
			if(GPIOA == pGPIOx)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800052c:	d106      	bne.n	800053c <GPIO_PeriClkCtrl+0xe4>
			{
				GPOIA_PCLK_DI();
 800052e:	4b2d      	ldr	r3, [pc, #180]	; (80005e4 <GPIO_PeriClkCtrl+0x18c>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000532:	4a2c      	ldr	r2, [pc, #176]	; (80005e4 <GPIO_PeriClkCtrl+0x18c>)
 8000534:	f023 0301 	bic.w	r3, r3, #1
 8000538:	64d3      	str	r3, [r2, #76]	; 0x4c
			{
				GPOIH_PCLK_DI();
			}
		}
	}
	return;
 800053a:	e04c      	b.n	80005d6 <GPIO_PeriClkCtrl+0x17e>
			else if(GPIOB == pGPIOx)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	4a2a      	ldr	r2, [pc, #168]	; (80005e8 <GPIO_PeriClkCtrl+0x190>)
 8000540:	4293      	cmp	r3, r2
 8000542:	d106      	bne.n	8000552 <GPIO_PeriClkCtrl+0xfa>
				GPOIB_PCLK_DI();
 8000544:	4b27      	ldr	r3, [pc, #156]	; (80005e4 <GPIO_PeriClkCtrl+0x18c>)
 8000546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000548:	4a26      	ldr	r2, [pc, #152]	; (80005e4 <GPIO_PeriClkCtrl+0x18c>)
 800054a:	f023 0302 	bic.w	r3, r3, #2
 800054e:	64d3      	str	r3, [r2, #76]	; 0x4c
	return;
 8000550:	e041      	b.n	80005d6 <GPIO_PeriClkCtrl+0x17e>
			else if(GPIOC == pGPIOx)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4a25      	ldr	r2, [pc, #148]	; (80005ec <GPIO_PeriClkCtrl+0x194>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d106      	bne.n	8000568 <GPIO_PeriClkCtrl+0x110>
				GPOIC_PCLK_DI();
 800055a:	4b22      	ldr	r3, [pc, #136]	; (80005e4 <GPIO_PeriClkCtrl+0x18c>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055e:	4a21      	ldr	r2, [pc, #132]	; (80005e4 <GPIO_PeriClkCtrl+0x18c>)
 8000560:	f023 0304 	bic.w	r3, r3, #4
 8000564:	64d3      	str	r3, [r2, #76]	; 0x4c
	return;
 8000566:	e036      	b.n	80005d6 <GPIO_PeriClkCtrl+0x17e>
			else if(GPIOD == pGPIOx)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4a21      	ldr	r2, [pc, #132]	; (80005f0 <GPIO_PeriClkCtrl+0x198>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d106      	bne.n	800057e <GPIO_PeriClkCtrl+0x126>
				GPOID_PCLK_DI();
 8000570:	4b1c      	ldr	r3, [pc, #112]	; (80005e4 <GPIO_PeriClkCtrl+0x18c>)
 8000572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000574:	4a1b      	ldr	r2, [pc, #108]	; (80005e4 <GPIO_PeriClkCtrl+0x18c>)
 8000576:	f023 0308 	bic.w	r3, r3, #8
 800057a:	64d3      	str	r3, [r2, #76]	; 0x4c
	return;
 800057c:	e02b      	b.n	80005d6 <GPIO_PeriClkCtrl+0x17e>
			else if(GPIOE == pGPIOx)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4a1c      	ldr	r2, [pc, #112]	; (80005f4 <GPIO_PeriClkCtrl+0x19c>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d106      	bne.n	8000594 <GPIO_PeriClkCtrl+0x13c>
				GPOIE_PCLK_DI();
 8000586:	4b17      	ldr	r3, [pc, #92]	; (80005e4 <GPIO_PeriClkCtrl+0x18c>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058a:	4a16      	ldr	r2, [pc, #88]	; (80005e4 <GPIO_PeriClkCtrl+0x18c>)
 800058c:	f023 0310 	bic.w	r3, r3, #16
 8000590:	64d3      	str	r3, [r2, #76]	; 0x4c
	return;
 8000592:	e020      	b.n	80005d6 <GPIO_PeriClkCtrl+0x17e>
			else if(GPIOF == pGPIOx)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	4a18      	ldr	r2, [pc, #96]	; (80005f8 <GPIO_PeriClkCtrl+0x1a0>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d106      	bne.n	80005aa <GPIO_PeriClkCtrl+0x152>
				GPOIF_PCLK_DI();
 800059c:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <GPIO_PeriClkCtrl+0x18c>)
 800059e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a0:	4a10      	ldr	r2, [pc, #64]	; (80005e4 <GPIO_PeriClkCtrl+0x18c>)
 80005a2:	f023 0320 	bic.w	r3, r3, #32
 80005a6:	64d3      	str	r3, [r2, #76]	; 0x4c
	return;
 80005a8:	e015      	b.n	80005d6 <GPIO_PeriClkCtrl+0x17e>
			else if(GPIOG == pGPIOx)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4a13      	ldr	r2, [pc, #76]	; (80005fc <GPIO_PeriClkCtrl+0x1a4>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d106      	bne.n	80005c0 <GPIO_PeriClkCtrl+0x168>
				GPOIG_PCLK_DI();
 80005b2:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <GPIO_PeriClkCtrl+0x18c>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b6:	4a0b      	ldr	r2, [pc, #44]	; (80005e4 <GPIO_PeriClkCtrl+0x18c>)
 80005b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80005bc:	64d3      	str	r3, [r2, #76]	; 0x4c
	return;
 80005be:	e00a      	b.n	80005d6 <GPIO_PeriClkCtrl+0x17e>
			else if(GPIOH == pGPIOx)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4a0f      	ldr	r2, [pc, #60]	; (8000600 <GPIO_PeriClkCtrl+0x1a8>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d106      	bne.n	80005d6 <GPIO_PeriClkCtrl+0x17e>
				GPOIH_PCLK_DI();
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <GPIO_PeriClkCtrl+0x18c>)
 80005ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005cc:	4a05      	ldr	r2, [pc, #20]	; (80005e4 <GPIO_PeriClkCtrl+0x18c>)
 80005ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80005d2:	64d3      	str	r3, [r2, #76]	; 0x4c
	return;
 80005d4:	bf00      	nop
 80005d6:	bf00      	nop
}
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	40021000 	.word	0x40021000
 80005e8:	48000400 	.word	0x48000400
 80005ec:	48000800 	.word	0x48000800
 80005f0:	48000c00 	.word	0x48000c00
 80005f4:	48001000 	.word	0x48001000
 80005f8:	48001400 	.word	0x48001400
 80005fc:	48001800 	.word	0x48001800
 8000600:	48001c00 	.word	0x48001c00

08000604 <Delay>:

#define TRIGGER_PIN
#define ECHO_PIN

void Delay(uint32_t uiMs)
{
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	unsigned int i = 0, j= 0;
 800060c:	2300      	movs	r3, #0
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < uiMs; ++i)
 8000614:	2300      	movs	r3, #0
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	e00c      	b.n	8000634 <Delay+0x30>
	{
		for(j = 0; j < 600; ++j);
 800061a:	2300      	movs	r3, #0
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	e002      	b.n	8000626 <Delay+0x22>
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	3301      	adds	r3, #1
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800062c:	d3f8      	bcc.n	8000620 <Delay+0x1c>
	for(i = 0; i < uiMs; ++i)
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	3301      	adds	r3, #1
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fa      	ldr	r2, [r7, #12]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	429a      	cmp	r2, r3
 800063a:	d3ee      	bcc.n	800061a <Delay+0x16>
	}
}
 800063c:	bf00      	nop
 800063e:	bf00      	nop
 8000640:	3714      	adds	r7, #20
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
	...

0800064c <main>:
void TestLed(void);
void InitUltraSonicSensor(void);
void ReadUltraSonicSensor(void);

int main(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	InitLed();
 8000650:	f000 f80a 	bl	8000668 <InitLed>
	while(1)
	{
		//TestLed();
		printf("Hello");
 8000654:	4803      	ldr	r0, [pc, #12]	; (8000664 <main+0x18>)
 8000656:	f000 f9e1 	bl	8000a1c <iprintf>
		Delay(500);
 800065a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800065e:	f7ff ffd1 	bl	8000604 <Delay>
		printf("Hello");
 8000662:	e7f7      	b.n	8000654 <main+0x8>
 8000664:	08001720 	.word	0x08001720

08000668 <InitLed>:
	}
}

void InitLed(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
	GPIO_Handle_t tLedGpio = {0};
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]

	tLedGpio.pGPIOx = GPIOA;
 8000678:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800067c:	607b      	str	r3, [r7, #4]
	tLedGpio.GpioPinConfig.GPIO_PinMode = eGPIO_OpMode;
 800067e:	2301      	movs	r3, #1
 8000680:	727b      	strb	r3, [r7, #9]
	tLedGpio.GpioPinConfig.GPIO_PinNumber = eGPIO_PIN_5;
 8000682:	2305      	movs	r3, #5
 8000684:	723b      	strb	r3, [r7, #8]
	tLedGpio.GpioPinConfig.GPIO_PinOpType = eGPIO_OpPushPull;
 8000686:	2300      	movs	r3, #0
 8000688:	733b      	strb	r3, [r7, #12]
	tLedGpio.GpioPinConfig.GPIO_PinSpeed = eGPIO_LowSpeed;
 800068a:	2300      	movs	r3, #0
 800068c:	72bb      	strb	r3, [r7, #10]
	tLedGpio.GpioPinConfig.GPIO_PinPuPdCtrl = eGPIO_NoPuPd;
 800068e:	2300      	movs	r3, #0
 8000690:	72fb      	strb	r3, [r7, #11]

	GPIO_PeriClkCtrl(GPIOA, ENABLE);
 8000692:	2101      	movs	r1, #1
 8000694:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000698:	f7ff fede 	bl	8000458 <GPIO_PeriClkCtrl>

	GPIO_Init(&tLedGpio);
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff fde6 	bl	8000270 <GPIO_Init>

	return;
 80006a4:	bf00      	nop
}
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <ITM_SendChar+0x48>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a0e      	ldr	r2, [pc, #56]	; (80006f4 <ITM_SendChar+0x48>)
 80006bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006c0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80006c2:	4b0d      	ldr	r3, [pc, #52]	; (80006f8 <ITM_SendChar+0x4c>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a0c      	ldr	r2, [pc, #48]	; (80006f8 <ITM_SendChar+0x4c>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80006ce:	bf00      	nop
 80006d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d0f8      	beq.n	80006d0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80006de:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	6013      	str	r3, [r2, #0]
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	e000edfc 	.word	0xe000edfc
 80006f8:	e0000e00 	.word	0xe0000e00

080006fc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
 800070c:	e00a      	b.n	8000724 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800070e:	f3af 8000 	nop.w
 8000712:	4601      	mov	r1, r0
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	1c5a      	adds	r2, r3, #1
 8000718:	60ba      	str	r2, [r7, #8]
 800071a:	b2ca      	uxtb	r2, r1
 800071c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	3301      	adds	r3, #1
 8000722:	617b      	str	r3, [r7, #20]
 8000724:	697a      	ldr	r2, [r7, #20]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	429a      	cmp	r2, r3
 800072a:	dbf0      	blt.n	800070e <_read+0x12>
  }

  return len;
 800072c:	687b      	ldr	r3, [r7, #4]
}
 800072e:	4618      	mov	r0, r3
 8000730:	3718      	adds	r7, #24
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}

08000736 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000736:	b580      	push	{r7, lr}
 8000738:	b086      	sub	sp, #24
 800073a:	af00      	add	r7, sp, #0
 800073c:	60f8      	str	r0, [r7, #12]
 800073e:	60b9      	str	r1, [r7, #8]
 8000740:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000742:	2300      	movs	r3, #0
 8000744:	617b      	str	r3, [r7, #20]
 8000746:	e009      	b.n	800075c <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	1c5a      	adds	r2, r3, #1
 800074c:	60ba      	str	r2, [r7, #8]
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff ffab 	bl	80006ac <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	3301      	adds	r3, #1
 800075a:	617b      	str	r3, [r7, #20]
 800075c:	697a      	ldr	r2, [r7, #20]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	429a      	cmp	r2, r3
 8000762:	dbf1      	blt.n	8000748 <_write+0x12>
  }
  return len;
 8000764:	687b      	ldr	r3, [r7, #4]
}
 8000766:	4618      	mov	r0, r3
 8000768:	3718      	adds	r7, #24
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <_close>:

int _close(int file)
{
 800076e:	b480      	push	{r7}
 8000770:	b083      	sub	sp, #12
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000776:	f04f 33ff 	mov.w	r3, #4294967295
}
 800077a:	4618      	mov	r0, r3
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr

08000786 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000786:	b480      	push	{r7}
 8000788:	b083      	sub	sp, #12
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
 800078e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000796:	605a      	str	r2, [r3, #4]
  return 0;
 8000798:	2300      	movs	r3, #0
}
 800079a:	4618      	mov	r0, r3
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr

080007a6 <_isatty>:

int _isatty(int file)
{
 80007a6:	b480      	push	{r7}
 80007a8:	b083      	sub	sp, #12
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007ae:	2301      	movs	r3, #1
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr

080007bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007c8:	2300      	movs	r3, #0
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3714      	adds	r7, #20
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
	...

080007d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007e0:	4a14      	ldr	r2, [pc, #80]	; (8000834 <_sbrk+0x5c>)
 80007e2:	4b15      	ldr	r3, [pc, #84]	; (8000838 <_sbrk+0x60>)
 80007e4:	1ad3      	subs	r3, r2, r3
 80007e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007ec:	4b13      	ldr	r3, [pc, #76]	; (800083c <_sbrk+0x64>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d102      	bne.n	80007fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <_sbrk+0x64>)
 80007f6:	4a12      	ldr	r2, [pc, #72]	; (8000840 <_sbrk+0x68>)
 80007f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007fa:	4b10      	ldr	r3, [pc, #64]	; (800083c <_sbrk+0x64>)
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4413      	add	r3, r2
 8000802:	693a      	ldr	r2, [r7, #16]
 8000804:	429a      	cmp	r2, r3
 8000806:	d207      	bcs.n	8000818 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000808:	f000 f9ac 	bl	8000b64 <__errno>
 800080c:	4603      	mov	r3, r0
 800080e:	220c      	movs	r2, #12
 8000810:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000812:	f04f 33ff 	mov.w	r3, #4294967295
 8000816:	e009      	b.n	800082c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000818:	4b08      	ldr	r3, [pc, #32]	; (800083c <_sbrk+0x64>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800081e:	4b07      	ldr	r3, [pc, #28]	; (800083c <_sbrk+0x64>)
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4413      	add	r3, r2
 8000826:	4a05      	ldr	r2, [pc, #20]	; (800083c <_sbrk+0x64>)
 8000828:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800082a:	68fb      	ldr	r3, [r7, #12]
}
 800082c:	4618      	mov	r0, r3
 800082e:	3718      	adds	r7, #24
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20018000 	.word	0x20018000
 8000838:	00000400 	.word	0x00000400
 800083c:	20000078 	.word	0x20000078
 8000840:	200001c8 	.word	0x200001c8

08000844 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000844:	480d      	ldr	r0, [pc, #52]	; (800087c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000846:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000848:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800084c:	480c      	ldr	r0, [pc, #48]	; (8000880 <LoopForever+0x6>)
  ldr r1, =_edata
 800084e:	490d      	ldr	r1, [pc, #52]	; (8000884 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000850:	4a0d      	ldr	r2, [pc, #52]	; (8000888 <LoopForever+0xe>)
  movs r3, #0
 8000852:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000854:	e002      	b.n	800085c <LoopCopyDataInit>

08000856 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000856:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000858:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800085a:	3304      	adds	r3, #4

0800085c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800085c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800085e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000860:	d3f9      	bcc.n	8000856 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000862:	4a0a      	ldr	r2, [pc, #40]	; (800088c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000864:	4c0a      	ldr	r4, [pc, #40]	; (8000890 <LoopForever+0x16>)
  movs r3, #0
 8000866:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000868:	e001      	b.n	800086e <LoopFillZerobss>

0800086a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800086a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800086c:	3204      	adds	r2, #4

0800086e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800086e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000870:	d3fb      	bcc.n	800086a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000872:	f000 f97d 	bl	8000b70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000876:	f7ff fee9 	bl	800064c <main>

0800087a <LoopForever>:

LoopForever:
  b LoopForever
 800087a:	e7fe      	b.n	800087a <LoopForever>
  ldr   r0, =_estack
 800087c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000880:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000884:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000888:	08001764 	.word	0x08001764
  ldr r2, =_sbss
 800088c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000890:	200001c8 	.word	0x200001c8

08000894 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000894:	e7fe      	b.n	8000894 <ADC1_2_IRQHandler>
	...

08000898 <std>:
 8000898:	2300      	movs	r3, #0
 800089a:	b510      	push	{r4, lr}
 800089c:	4604      	mov	r4, r0
 800089e:	e9c0 3300 	strd	r3, r3, [r0]
 80008a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80008a6:	6083      	str	r3, [r0, #8]
 80008a8:	8181      	strh	r1, [r0, #12]
 80008aa:	6643      	str	r3, [r0, #100]	; 0x64
 80008ac:	81c2      	strh	r2, [r0, #14]
 80008ae:	6183      	str	r3, [r0, #24]
 80008b0:	4619      	mov	r1, r3
 80008b2:	2208      	movs	r2, #8
 80008b4:	305c      	adds	r0, #92	; 0x5c
 80008b6:	f000 f906 	bl	8000ac6 <memset>
 80008ba:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <std+0x58>)
 80008bc:	6263      	str	r3, [r4, #36]	; 0x24
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <std+0x5c>)
 80008c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80008c2:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <std+0x60>)
 80008c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <std+0x64>)
 80008c8:	6323      	str	r3, [r4, #48]	; 0x30
 80008ca:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <std+0x68>)
 80008cc:	6224      	str	r4, [r4, #32]
 80008ce:	429c      	cmp	r4, r3
 80008d0:	d006      	beq.n	80008e0 <std+0x48>
 80008d2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80008d6:	4294      	cmp	r4, r2
 80008d8:	d002      	beq.n	80008e0 <std+0x48>
 80008da:	33d0      	adds	r3, #208	; 0xd0
 80008dc:	429c      	cmp	r4, r3
 80008de:	d105      	bne.n	80008ec <std+0x54>
 80008e0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80008e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008e8:	f000 b966 	b.w	8000bb8 <__retarget_lock_init_recursive>
 80008ec:	bd10      	pop	{r4, pc}
 80008ee:	bf00      	nop
 80008f0:	08000a41 	.word	0x08000a41
 80008f4:	08000a63 	.word	0x08000a63
 80008f8:	08000a9b 	.word	0x08000a9b
 80008fc:	08000abf 	.word	0x08000abf
 8000900:	2000007c 	.word	0x2000007c

08000904 <stdio_exit_handler>:
 8000904:	4a02      	ldr	r2, [pc, #8]	; (8000910 <stdio_exit_handler+0xc>)
 8000906:	4903      	ldr	r1, [pc, #12]	; (8000914 <stdio_exit_handler+0x10>)
 8000908:	4803      	ldr	r0, [pc, #12]	; (8000918 <stdio_exit_handler+0x14>)
 800090a:	f000 b869 	b.w	80009e0 <_fwalk_sglue>
 800090e:	bf00      	nop
 8000910:	20000000 	.word	0x20000000
 8000914:	08001465 	.word	0x08001465
 8000918:	2000000c 	.word	0x2000000c

0800091c <cleanup_stdio>:
 800091c:	6841      	ldr	r1, [r0, #4]
 800091e:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <cleanup_stdio+0x34>)
 8000920:	4299      	cmp	r1, r3
 8000922:	b510      	push	{r4, lr}
 8000924:	4604      	mov	r4, r0
 8000926:	d001      	beq.n	800092c <cleanup_stdio+0x10>
 8000928:	f000 fd9c 	bl	8001464 <_fflush_r>
 800092c:	68a1      	ldr	r1, [r4, #8]
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <cleanup_stdio+0x38>)
 8000930:	4299      	cmp	r1, r3
 8000932:	d002      	beq.n	800093a <cleanup_stdio+0x1e>
 8000934:	4620      	mov	r0, r4
 8000936:	f000 fd95 	bl	8001464 <_fflush_r>
 800093a:	68e1      	ldr	r1, [r4, #12]
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <cleanup_stdio+0x3c>)
 800093e:	4299      	cmp	r1, r3
 8000940:	d004      	beq.n	800094c <cleanup_stdio+0x30>
 8000942:	4620      	mov	r0, r4
 8000944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000948:	f000 bd8c 	b.w	8001464 <_fflush_r>
 800094c:	bd10      	pop	{r4, pc}
 800094e:	bf00      	nop
 8000950:	2000007c 	.word	0x2000007c
 8000954:	200000e4 	.word	0x200000e4
 8000958:	2000014c 	.word	0x2000014c

0800095c <global_stdio_init.part.0>:
 800095c:	b510      	push	{r4, lr}
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <global_stdio_init.part.0+0x30>)
 8000960:	4c0b      	ldr	r4, [pc, #44]	; (8000990 <global_stdio_init.part.0+0x34>)
 8000962:	4a0c      	ldr	r2, [pc, #48]	; (8000994 <global_stdio_init.part.0+0x38>)
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	4620      	mov	r0, r4
 8000968:	2200      	movs	r2, #0
 800096a:	2104      	movs	r1, #4
 800096c:	f7ff ff94 	bl	8000898 <std>
 8000970:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000974:	2201      	movs	r2, #1
 8000976:	2109      	movs	r1, #9
 8000978:	f7ff ff8e 	bl	8000898 <std>
 800097c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000980:	2202      	movs	r2, #2
 8000982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000986:	2112      	movs	r1, #18
 8000988:	f7ff bf86 	b.w	8000898 <std>
 800098c:	200001b4 	.word	0x200001b4
 8000990:	2000007c 	.word	0x2000007c
 8000994:	08000905 	.word	0x08000905

08000998 <__sfp_lock_acquire>:
 8000998:	4801      	ldr	r0, [pc, #4]	; (80009a0 <__sfp_lock_acquire+0x8>)
 800099a:	f000 b90e 	b.w	8000bba <__retarget_lock_acquire_recursive>
 800099e:	bf00      	nop
 80009a0:	200001bd 	.word	0x200001bd

080009a4 <__sfp_lock_release>:
 80009a4:	4801      	ldr	r0, [pc, #4]	; (80009ac <__sfp_lock_release+0x8>)
 80009a6:	f000 b909 	b.w	8000bbc <__retarget_lock_release_recursive>
 80009aa:	bf00      	nop
 80009ac:	200001bd 	.word	0x200001bd

080009b0 <__sinit>:
 80009b0:	b510      	push	{r4, lr}
 80009b2:	4604      	mov	r4, r0
 80009b4:	f7ff fff0 	bl	8000998 <__sfp_lock_acquire>
 80009b8:	6a23      	ldr	r3, [r4, #32]
 80009ba:	b11b      	cbz	r3, 80009c4 <__sinit+0x14>
 80009bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009c0:	f7ff bff0 	b.w	80009a4 <__sfp_lock_release>
 80009c4:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <__sinit+0x28>)
 80009c6:	6223      	str	r3, [r4, #32]
 80009c8:	4b04      	ldr	r3, [pc, #16]	; (80009dc <__sinit+0x2c>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d1f5      	bne.n	80009bc <__sinit+0xc>
 80009d0:	f7ff ffc4 	bl	800095c <global_stdio_init.part.0>
 80009d4:	e7f2      	b.n	80009bc <__sinit+0xc>
 80009d6:	bf00      	nop
 80009d8:	0800091d 	.word	0x0800091d
 80009dc:	200001b4 	.word	0x200001b4

080009e0 <_fwalk_sglue>:
 80009e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009e4:	4607      	mov	r7, r0
 80009e6:	4688      	mov	r8, r1
 80009e8:	4614      	mov	r4, r2
 80009ea:	2600      	movs	r6, #0
 80009ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80009f0:	f1b9 0901 	subs.w	r9, r9, #1
 80009f4:	d505      	bpl.n	8000a02 <_fwalk_sglue+0x22>
 80009f6:	6824      	ldr	r4, [r4, #0]
 80009f8:	2c00      	cmp	r4, #0
 80009fa:	d1f7      	bne.n	80009ec <_fwalk_sglue+0xc>
 80009fc:	4630      	mov	r0, r6
 80009fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a02:	89ab      	ldrh	r3, [r5, #12]
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d907      	bls.n	8000a18 <_fwalk_sglue+0x38>
 8000a08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	d003      	beq.n	8000a18 <_fwalk_sglue+0x38>
 8000a10:	4629      	mov	r1, r5
 8000a12:	4638      	mov	r0, r7
 8000a14:	47c0      	blx	r8
 8000a16:	4306      	orrs	r6, r0
 8000a18:	3568      	adds	r5, #104	; 0x68
 8000a1a:	e7e9      	b.n	80009f0 <_fwalk_sglue+0x10>

08000a1c <iprintf>:
 8000a1c:	b40f      	push	{r0, r1, r2, r3}
 8000a1e:	b507      	push	{r0, r1, r2, lr}
 8000a20:	4906      	ldr	r1, [pc, #24]	; (8000a3c <iprintf+0x20>)
 8000a22:	ab04      	add	r3, sp, #16
 8000a24:	6808      	ldr	r0, [r1, #0]
 8000a26:	f853 2b04 	ldr.w	r2, [r3], #4
 8000a2a:	6881      	ldr	r1, [r0, #8]
 8000a2c:	9301      	str	r3, [sp, #4]
 8000a2e:	f000 f9e9 	bl	8000e04 <_vfiprintf_r>
 8000a32:	b003      	add	sp, #12
 8000a34:	f85d eb04 	ldr.w	lr, [sp], #4
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr
 8000a3c:	20000058 	.word	0x20000058

08000a40 <__sread>:
 8000a40:	b510      	push	{r4, lr}
 8000a42:	460c      	mov	r4, r1
 8000a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a48:	f000 f868 	bl	8000b1c <_read_r>
 8000a4c:	2800      	cmp	r0, #0
 8000a4e:	bfab      	itete	ge
 8000a50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000a52:	89a3      	ldrhlt	r3, [r4, #12]
 8000a54:	181b      	addge	r3, r3, r0
 8000a56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000a5a:	bfac      	ite	ge
 8000a5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8000a5e:	81a3      	strhlt	r3, [r4, #12]
 8000a60:	bd10      	pop	{r4, pc}

08000a62 <__swrite>:
 8000a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a66:	461f      	mov	r7, r3
 8000a68:	898b      	ldrh	r3, [r1, #12]
 8000a6a:	05db      	lsls	r3, r3, #23
 8000a6c:	4605      	mov	r5, r0
 8000a6e:	460c      	mov	r4, r1
 8000a70:	4616      	mov	r6, r2
 8000a72:	d505      	bpl.n	8000a80 <__swrite+0x1e>
 8000a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a78:	2302      	movs	r3, #2
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f000 f83c 	bl	8000af8 <_lseek_r>
 8000a80:	89a3      	ldrh	r3, [r4, #12]
 8000a82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000a86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a8a:	81a3      	strh	r3, [r4, #12]
 8000a8c:	4632      	mov	r2, r6
 8000a8e:	463b      	mov	r3, r7
 8000a90:	4628      	mov	r0, r5
 8000a92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000a96:	f000 b853 	b.w	8000b40 <_write_r>

08000a9a <__sseek>:
 8000a9a:	b510      	push	{r4, lr}
 8000a9c:	460c      	mov	r4, r1
 8000a9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000aa2:	f000 f829 	bl	8000af8 <_lseek_r>
 8000aa6:	1c43      	adds	r3, r0, #1
 8000aa8:	89a3      	ldrh	r3, [r4, #12]
 8000aaa:	bf15      	itete	ne
 8000aac:	6560      	strne	r0, [r4, #84]	; 0x54
 8000aae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000ab2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000ab6:	81a3      	strheq	r3, [r4, #12]
 8000ab8:	bf18      	it	ne
 8000aba:	81a3      	strhne	r3, [r4, #12]
 8000abc:	bd10      	pop	{r4, pc}

08000abe <__sclose>:
 8000abe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ac2:	f000 b809 	b.w	8000ad8 <_close_r>

08000ac6 <memset>:
 8000ac6:	4402      	add	r2, r0
 8000ac8:	4603      	mov	r3, r0
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d100      	bne.n	8000ad0 <memset+0xa>
 8000ace:	4770      	bx	lr
 8000ad0:	f803 1b01 	strb.w	r1, [r3], #1
 8000ad4:	e7f9      	b.n	8000aca <memset+0x4>
	...

08000ad8 <_close_r>:
 8000ad8:	b538      	push	{r3, r4, r5, lr}
 8000ada:	4d06      	ldr	r5, [pc, #24]	; (8000af4 <_close_r+0x1c>)
 8000adc:	2300      	movs	r3, #0
 8000ade:	4604      	mov	r4, r0
 8000ae0:	4608      	mov	r0, r1
 8000ae2:	602b      	str	r3, [r5, #0]
 8000ae4:	f7ff fe43 	bl	800076e <_close>
 8000ae8:	1c43      	adds	r3, r0, #1
 8000aea:	d102      	bne.n	8000af2 <_close_r+0x1a>
 8000aec:	682b      	ldr	r3, [r5, #0]
 8000aee:	b103      	cbz	r3, 8000af2 <_close_r+0x1a>
 8000af0:	6023      	str	r3, [r4, #0]
 8000af2:	bd38      	pop	{r3, r4, r5, pc}
 8000af4:	200001b8 	.word	0x200001b8

08000af8 <_lseek_r>:
 8000af8:	b538      	push	{r3, r4, r5, lr}
 8000afa:	4d07      	ldr	r5, [pc, #28]	; (8000b18 <_lseek_r+0x20>)
 8000afc:	4604      	mov	r4, r0
 8000afe:	4608      	mov	r0, r1
 8000b00:	4611      	mov	r1, r2
 8000b02:	2200      	movs	r2, #0
 8000b04:	602a      	str	r2, [r5, #0]
 8000b06:	461a      	mov	r2, r3
 8000b08:	f7ff fe58 	bl	80007bc <_lseek>
 8000b0c:	1c43      	adds	r3, r0, #1
 8000b0e:	d102      	bne.n	8000b16 <_lseek_r+0x1e>
 8000b10:	682b      	ldr	r3, [r5, #0]
 8000b12:	b103      	cbz	r3, 8000b16 <_lseek_r+0x1e>
 8000b14:	6023      	str	r3, [r4, #0]
 8000b16:	bd38      	pop	{r3, r4, r5, pc}
 8000b18:	200001b8 	.word	0x200001b8

08000b1c <_read_r>:
 8000b1c:	b538      	push	{r3, r4, r5, lr}
 8000b1e:	4d07      	ldr	r5, [pc, #28]	; (8000b3c <_read_r+0x20>)
 8000b20:	4604      	mov	r4, r0
 8000b22:	4608      	mov	r0, r1
 8000b24:	4611      	mov	r1, r2
 8000b26:	2200      	movs	r2, #0
 8000b28:	602a      	str	r2, [r5, #0]
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	f7ff fde6 	bl	80006fc <_read>
 8000b30:	1c43      	adds	r3, r0, #1
 8000b32:	d102      	bne.n	8000b3a <_read_r+0x1e>
 8000b34:	682b      	ldr	r3, [r5, #0]
 8000b36:	b103      	cbz	r3, 8000b3a <_read_r+0x1e>
 8000b38:	6023      	str	r3, [r4, #0]
 8000b3a:	bd38      	pop	{r3, r4, r5, pc}
 8000b3c:	200001b8 	.word	0x200001b8

08000b40 <_write_r>:
 8000b40:	b538      	push	{r3, r4, r5, lr}
 8000b42:	4d07      	ldr	r5, [pc, #28]	; (8000b60 <_write_r+0x20>)
 8000b44:	4604      	mov	r4, r0
 8000b46:	4608      	mov	r0, r1
 8000b48:	4611      	mov	r1, r2
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	602a      	str	r2, [r5, #0]
 8000b4e:	461a      	mov	r2, r3
 8000b50:	f7ff fdf1 	bl	8000736 <_write>
 8000b54:	1c43      	adds	r3, r0, #1
 8000b56:	d102      	bne.n	8000b5e <_write_r+0x1e>
 8000b58:	682b      	ldr	r3, [r5, #0]
 8000b5a:	b103      	cbz	r3, 8000b5e <_write_r+0x1e>
 8000b5c:	6023      	str	r3, [r4, #0]
 8000b5e:	bd38      	pop	{r3, r4, r5, pc}
 8000b60:	200001b8 	.word	0x200001b8

08000b64 <__errno>:
 8000b64:	4b01      	ldr	r3, [pc, #4]	; (8000b6c <__errno+0x8>)
 8000b66:	6818      	ldr	r0, [r3, #0]
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	20000058 	.word	0x20000058

08000b70 <__libc_init_array>:
 8000b70:	b570      	push	{r4, r5, r6, lr}
 8000b72:	4d0d      	ldr	r5, [pc, #52]	; (8000ba8 <__libc_init_array+0x38>)
 8000b74:	4c0d      	ldr	r4, [pc, #52]	; (8000bac <__libc_init_array+0x3c>)
 8000b76:	1b64      	subs	r4, r4, r5
 8000b78:	10a4      	asrs	r4, r4, #2
 8000b7a:	2600      	movs	r6, #0
 8000b7c:	42a6      	cmp	r6, r4
 8000b7e:	d109      	bne.n	8000b94 <__libc_init_array+0x24>
 8000b80:	4d0b      	ldr	r5, [pc, #44]	; (8000bb0 <__libc_init_array+0x40>)
 8000b82:	4c0c      	ldr	r4, [pc, #48]	; (8000bb4 <__libc_init_array+0x44>)
 8000b84:	f000 fdc0 	bl	8001708 <_init>
 8000b88:	1b64      	subs	r4, r4, r5
 8000b8a:	10a4      	asrs	r4, r4, #2
 8000b8c:	2600      	movs	r6, #0
 8000b8e:	42a6      	cmp	r6, r4
 8000b90:	d105      	bne.n	8000b9e <__libc_init_array+0x2e>
 8000b92:	bd70      	pop	{r4, r5, r6, pc}
 8000b94:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b98:	4798      	blx	r3
 8000b9a:	3601      	adds	r6, #1
 8000b9c:	e7ee      	b.n	8000b7c <__libc_init_array+0xc>
 8000b9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ba2:	4798      	blx	r3
 8000ba4:	3601      	adds	r6, #1
 8000ba6:	e7f2      	b.n	8000b8e <__libc_init_array+0x1e>
 8000ba8:	0800175c 	.word	0x0800175c
 8000bac:	0800175c 	.word	0x0800175c
 8000bb0:	0800175c 	.word	0x0800175c
 8000bb4:	08001760 	.word	0x08001760

08000bb8 <__retarget_lock_init_recursive>:
 8000bb8:	4770      	bx	lr

08000bba <__retarget_lock_acquire_recursive>:
 8000bba:	4770      	bx	lr

08000bbc <__retarget_lock_release_recursive>:
 8000bbc:	4770      	bx	lr
	...

08000bc0 <_free_r>:
 8000bc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000bc2:	2900      	cmp	r1, #0
 8000bc4:	d044      	beq.n	8000c50 <_free_r+0x90>
 8000bc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000bca:	9001      	str	r0, [sp, #4]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	f1a1 0404 	sub.w	r4, r1, #4
 8000bd2:	bfb8      	it	lt
 8000bd4:	18e4      	addlt	r4, r4, r3
 8000bd6:	f000 f8df 	bl	8000d98 <__malloc_lock>
 8000bda:	4a1e      	ldr	r2, [pc, #120]	; (8000c54 <_free_r+0x94>)
 8000bdc:	9801      	ldr	r0, [sp, #4]
 8000bde:	6813      	ldr	r3, [r2, #0]
 8000be0:	b933      	cbnz	r3, 8000bf0 <_free_r+0x30>
 8000be2:	6063      	str	r3, [r4, #4]
 8000be4:	6014      	str	r4, [r2, #0]
 8000be6:	b003      	add	sp, #12
 8000be8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000bec:	f000 b8da 	b.w	8000da4 <__malloc_unlock>
 8000bf0:	42a3      	cmp	r3, r4
 8000bf2:	d908      	bls.n	8000c06 <_free_r+0x46>
 8000bf4:	6825      	ldr	r5, [r4, #0]
 8000bf6:	1961      	adds	r1, r4, r5
 8000bf8:	428b      	cmp	r3, r1
 8000bfa:	bf01      	itttt	eq
 8000bfc:	6819      	ldreq	r1, [r3, #0]
 8000bfe:	685b      	ldreq	r3, [r3, #4]
 8000c00:	1949      	addeq	r1, r1, r5
 8000c02:	6021      	streq	r1, [r4, #0]
 8000c04:	e7ed      	b.n	8000be2 <_free_r+0x22>
 8000c06:	461a      	mov	r2, r3
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	b10b      	cbz	r3, 8000c10 <_free_r+0x50>
 8000c0c:	42a3      	cmp	r3, r4
 8000c0e:	d9fa      	bls.n	8000c06 <_free_r+0x46>
 8000c10:	6811      	ldr	r1, [r2, #0]
 8000c12:	1855      	adds	r5, r2, r1
 8000c14:	42a5      	cmp	r5, r4
 8000c16:	d10b      	bne.n	8000c30 <_free_r+0x70>
 8000c18:	6824      	ldr	r4, [r4, #0]
 8000c1a:	4421      	add	r1, r4
 8000c1c:	1854      	adds	r4, r2, r1
 8000c1e:	42a3      	cmp	r3, r4
 8000c20:	6011      	str	r1, [r2, #0]
 8000c22:	d1e0      	bne.n	8000be6 <_free_r+0x26>
 8000c24:	681c      	ldr	r4, [r3, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	6053      	str	r3, [r2, #4]
 8000c2a:	440c      	add	r4, r1
 8000c2c:	6014      	str	r4, [r2, #0]
 8000c2e:	e7da      	b.n	8000be6 <_free_r+0x26>
 8000c30:	d902      	bls.n	8000c38 <_free_r+0x78>
 8000c32:	230c      	movs	r3, #12
 8000c34:	6003      	str	r3, [r0, #0]
 8000c36:	e7d6      	b.n	8000be6 <_free_r+0x26>
 8000c38:	6825      	ldr	r5, [r4, #0]
 8000c3a:	1961      	adds	r1, r4, r5
 8000c3c:	428b      	cmp	r3, r1
 8000c3e:	bf04      	itt	eq
 8000c40:	6819      	ldreq	r1, [r3, #0]
 8000c42:	685b      	ldreq	r3, [r3, #4]
 8000c44:	6063      	str	r3, [r4, #4]
 8000c46:	bf04      	itt	eq
 8000c48:	1949      	addeq	r1, r1, r5
 8000c4a:	6021      	streq	r1, [r4, #0]
 8000c4c:	6054      	str	r4, [r2, #4]
 8000c4e:	e7ca      	b.n	8000be6 <_free_r+0x26>
 8000c50:	b003      	add	sp, #12
 8000c52:	bd30      	pop	{r4, r5, pc}
 8000c54:	200001c0 	.word	0x200001c0

08000c58 <sbrk_aligned>:
 8000c58:	b570      	push	{r4, r5, r6, lr}
 8000c5a:	4e0e      	ldr	r6, [pc, #56]	; (8000c94 <sbrk_aligned+0x3c>)
 8000c5c:	460c      	mov	r4, r1
 8000c5e:	6831      	ldr	r1, [r6, #0]
 8000c60:	4605      	mov	r5, r0
 8000c62:	b911      	cbnz	r1, 8000c6a <sbrk_aligned+0x12>
 8000c64:	f000 fcbc 	bl	80015e0 <_sbrk_r>
 8000c68:	6030      	str	r0, [r6, #0]
 8000c6a:	4621      	mov	r1, r4
 8000c6c:	4628      	mov	r0, r5
 8000c6e:	f000 fcb7 	bl	80015e0 <_sbrk_r>
 8000c72:	1c43      	adds	r3, r0, #1
 8000c74:	d00a      	beq.n	8000c8c <sbrk_aligned+0x34>
 8000c76:	1cc4      	adds	r4, r0, #3
 8000c78:	f024 0403 	bic.w	r4, r4, #3
 8000c7c:	42a0      	cmp	r0, r4
 8000c7e:	d007      	beq.n	8000c90 <sbrk_aligned+0x38>
 8000c80:	1a21      	subs	r1, r4, r0
 8000c82:	4628      	mov	r0, r5
 8000c84:	f000 fcac 	bl	80015e0 <_sbrk_r>
 8000c88:	3001      	adds	r0, #1
 8000c8a:	d101      	bne.n	8000c90 <sbrk_aligned+0x38>
 8000c8c:	f04f 34ff 	mov.w	r4, #4294967295
 8000c90:	4620      	mov	r0, r4
 8000c92:	bd70      	pop	{r4, r5, r6, pc}
 8000c94:	200001c4 	.word	0x200001c4

08000c98 <_malloc_r>:
 8000c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c9c:	1ccd      	adds	r5, r1, #3
 8000c9e:	f025 0503 	bic.w	r5, r5, #3
 8000ca2:	3508      	adds	r5, #8
 8000ca4:	2d0c      	cmp	r5, #12
 8000ca6:	bf38      	it	cc
 8000ca8:	250c      	movcc	r5, #12
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	4607      	mov	r7, r0
 8000cae:	db01      	blt.n	8000cb4 <_malloc_r+0x1c>
 8000cb0:	42a9      	cmp	r1, r5
 8000cb2:	d905      	bls.n	8000cc0 <_malloc_r+0x28>
 8000cb4:	230c      	movs	r3, #12
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	2600      	movs	r6, #0
 8000cba:	4630      	mov	r0, r6
 8000cbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000cc0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000d94 <_malloc_r+0xfc>
 8000cc4:	f000 f868 	bl	8000d98 <__malloc_lock>
 8000cc8:	f8d8 3000 	ldr.w	r3, [r8]
 8000ccc:	461c      	mov	r4, r3
 8000cce:	bb5c      	cbnz	r4, 8000d28 <_malloc_r+0x90>
 8000cd0:	4629      	mov	r1, r5
 8000cd2:	4638      	mov	r0, r7
 8000cd4:	f7ff ffc0 	bl	8000c58 <sbrk_aligned>
 8000cd8:	1c43      	adds	r3, r0, #1
 8000cda:	4604      	mov	r4, r0
 8000cdc:	d155      	bne.n	8000d8a <_malloc_r+0xf2>
 8000cde:	f8d8 4000 	ldr.w	r4, [r8]
 8000ce2:	4626      	mov	r6, r4
 8000ce4:	2e00      	cmp	r6, #0
 8000ce6:	d145      	bne.n	8000d74 <_malloc_r+0xdc>
 8000ce8:	2c00      	cmp	r4, #0
 8000cea:	d048      	beq.n	8000d7e <_malloc_r+0xe6>
 8000cec:	6823      	ldr	r3, [r4, #0]
 8000cee:	4631      	mov	r1, r6
 8000cf0:	4638      	mov	r0, r7
 8000cf2:	eb04 0903 	add.w	r9, r4, r3
 8000cf6:	f000 fc73 	bl	80015e0 <_sbrk_r>
 8000cfa:	4581      	cmp	r9, r0
 8000cfc:	d13f      	bne.n	8000d7e <_malloc_r+0xe6>
 8000cfe:	6821      	ldr	r1, [r4, #0]
 8000d00:	1a6d      	subs	r5, r5, r1
 8000d02:	4629      	mov	r1, r5
 8000d04:	4638      	mov	r0, r7
 8000d06:	f7ff ffa7 	bl	8000c58 <sbrk_aligned>
 8000d0a:	3001      	adds	r0, #1
 8000d0c:	d037      	beq.n	8000d7e <_malloc_r+0xe6>
 8000d0e:	6823      	ldr	r3, [r4, #0]
 8000d10:	442b      	add	r3, r5
 8000d12:	6023      	str	r3, [r4, #0]
 8000d14:	f8d8 3000 	ldr.w	r3, [r8]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d038      	beq.n	8000d8e <_malloc_r+0xf6>
 8000d1c:	685a      	ldr	r2, [r3, #4]
 8000d1e:	42a2      	cmp	r2, r4
 8000d20:	d12b      	bne.n	8000d7a <_malloc_r+0xe2>
 8000d22:	2200      	movs	r2, #0
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	e00f      	b.n	8000d48 <_malloc_r+0xb0>
 8000d28:	6822      	ldr	r2, [r4, #0]
 8000d2a:	1b52      	subs	r2, r2, r5
 8000d2c:	d41f      	bmi.n	8000d6e <_malloc_r+0xd6>
 8000d2e:	2a0b      	cmp	r2, #11
 8000d30:	d917      	bls.n	8000d62 <_malloc_r+0xca>
 8000d32:	1961      	adds	r1, r4, r5
 8000d34:	42a3      	cmp	r3, r4
 8000d36:	6025      	str	r5, [r4, #0]
 8000d38:	bf18      	it	ne
 8000d3a:	6059      	strne	r1, [r3, #4]
 8000d3c:	6863      	ldr	r3, [r4, #4]
 8000d3e:	bf08      	it	eq
 8000d40:	f8c8 1000 	streq.w	r1, [r8]
 8000d44:	5162      	str	r2, [r4, r5]
 8000d46:	604b      	str	r3, [r1, #4]
 8000d48:	4638      	mov	r0, r7
 8000d4a:	f104 060b 	add.w	r6, r4, #11
 8000d4e:	f000 f829 	bl	8000da4 <__malloc_unlock>
 8000d52:	f026 0607 	bic.w	r6, r6, #7
 8000d56:	1d23      	adds	r3, r4, #4
 8000d58:	1af2      	subs	r2, r6, r3
 8000d5a:	d0ae      	beq.n	8000cba <_malloc_r+0x22>
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	50a3      	str	r3, [r4, r2]
 8000d60:	e7ab      	b.n	8000cba <_malloc_r+0x22>
 8000d62:	42a3      	cmp	r3, r4
 8000d64:	6862      	ldr	r2, [r4, #4]
 8000d66:	d1dd      	bne.n	8000d24 <_malloc_r+0x8c>
 8000d68:	f8c8 2000 	str.w	r2, [r8]
 8000d6c:	e7ec      	b.n	8000d48 <_malloc_r+0xb0>
 8000d6e:	4623      	mov	r3, r4
 8000d70:	6864      	ldr	r4, [r4, #4]
 8000d72:	e7ac      	b.n	8000cce <_malloc_r+0x36>
 8000d74:	4634      	mov	r4, r6
 8000d76:	6876      	ldr	r6, [r6, #4]
 8000d78:	e7b4      	b.n	8000ce4 <_malloc_r+0x4c>
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	e7cc      	b.n	8000d18 <_malloc_r+0x80>
 8000d7e:	230c      	movs	r3, #12
 8000d80:	603b      	str	r3, [r7, #0]
 8000d82:	4638      	mov	r0, r7
 8000d84:	f000 f80e 	bl	8000da4 <__malloc_unlock>
 8000d88:	e797      	b.n	8000cba <_malloc_r+0x22>
 8000d8a:	6025      	str	r5, [r4, #0]
 8000d8c:	e7dc      	b.n	8000d48 <_malloc_r+0xb0>
 8000d8e:	605b      	str	r3, [r3, #4]
 8000d90:	deff      	udf	#255	; 0xff
 8000d92:	bf00      	nop
 8000d94:	200001c0 	.word	0x200001c0

08000d98 <__malloc_lock>:
 8000d98:	4801      	ldr	r0, [pc, #4]	; (8000da0 <__malloc_lock+0x8>)
 8000d9a:	f7ff bf0e 	b.w	8000bba <__retarget_lock_acquire_recursive>
 8000d9e:	bf00      	nop
 8000da0:	200001bc 	.word	0x200001bc

08000da4 <__malloc_unlock>:
 8000da4:	4801      	ldr	r0, [pc, #4]	; (8000dac <__malloc_unlock+0x8>)
 8000da6:	f7ff bf09 	b.w	8000bbc <__retarget_lock_release_recursive>
 8000daa:	bf00      	nop
 8000dac:	200001bc 	.word	0x200001bc

08000db0 <__sfputc_r>:
 8000db0:	6893      	ldr	r3, [r2, #8]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	b410      	push	{r4}
 8000db8:	6093      	str	r3, [r2, #8]
 8000dba:	da08      	bge.n	8000dce <__sfputc_r+0x1e>
 8000dbc:	6994      	ldr	r4, [r2, #24]
 8000dbe:	42a3      	cmp	r3, r4
 8000dc0:	db01      	blt.n	8000dc6 <__sfputc_r+0x16>
 8000dc2:	290a      	cmp	r1, #10
 8000dc4:	d103      	bne.n	8000dce <__sfputc_r+0x1e>
 8000dc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000dca:	f000 bb73 	b.w	80014b4 <__swbuf_r>
 8000dce:	6813      	ldr	r3, [r2, #0]
 8000dd0:	1c58      	adds	r0, r3, #1
 8000dd2:	6010      	str	r0, [r2, #0]
 8000dd4:	7019      	strb	r1, [r3, #0]
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <__sfputs_r>:
 8000dde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000de0:	4606      	mov	r6, r0
 8000de2:	460f      	mov	r7, r1
 8000de4:	4614      	mov	r4, r2
 8000de6:	18d5      	adds	r5, r2, r3
 8000de8:	42ac      	cmp	r4, r5
 8000dea:	d101      	bne.n	8000df0 <__sfputs_r+0x12>
 8000dec:	2000      	movs	r0, #0
 8000dee:	e007      	b.n	8000e00 <__sfputs_r+0x22>
 8000df0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000df4:	463a      	mov	r2, r7
 8000df6:	4630      	mov	r0, r6
 8000df8:	f7ff ffda 	bl	8000db0 <__sfputc_r>
 8000dfc:	1c43      	adds	r3, r0, #1
 8000dfe:	d1f3      	bne.n	8000de8 <__sfputs_r+0xa>
 8000e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000e04 <_vfiprintf_r>:
 8000e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e08:	460d      	mov	r5, r1
 8000e0a:	b09d      	sub	sp, #116	; 0x74
 8000e0c:	4614      	mov	r4, r2
 8000e0e:	4698      	mov	r8, r3
 8000e10:	4606      	mov	r6, r0
 8000e12:	b118      	cbz	r0, 8000e1c <_vfiprintf_r+0x18>
 8000e14:	6a03      	ldr	r3, [r0, #32]
 8000e16:	b90b      	cbnz	r3, 8000e1c <_vfiprintf_r+0x18>
 8000e18:	f7ff fdca 	bl	80009b0 <__sinit>
 8000e1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000e1e:	07d9      	lsls	r1, r3, #31
 8000e20:	d405      	bmi.n	8000e2e <_vfiprintf_r+0x2a>
 8000e22:	89ab      	ldrh	r3, [r5, #12]
 8000e24:	059a      	lsls	r2, r3, #22
 8000e26:	d402      	bmi.n	8000e2e <_vfiprintf_r+0x2a>
 8000e28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000e2a:	f7ff fec6 	bl	8000bba <__retarget_lock_acquire_recursive>
 8000e2e:	89ab      	ldrh	r3, [r5, #12]
 8000e30:	071b      	lsls	r3, r3, #28
 8000e32:	d501      	bpl.n	8000e38 <_vfiprintf_r+0x34>
 8000e34:	692b      	ldr	r3, [r5, #16]
 8000e36:	b99b      	cbnz	r3, 8000e60 <_vfiprintf_r+0x5c>
 8000e38:	4629      	mov	r1, r5
 8000e3a:	4630      	mov	r0, r6
 8000e3c:	f000 fb78 	bl	8001530 <__swsetup_r>
 8000e40:	b170      	cbz	r0, 8000e60 <_vfiprintf_r+0x5c>
 8000e42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000e44:	07dc      	lsls	r4, r3, #31
 8000e46:	d504      	bpl.n	8000e52 <_vfiprintf_r+0x4e>
 8000e48:	f04f 30ff 	mov.w	r0, #4294967295
 8000e4c:	b01d      	add	sp, #116	; 0x74
 8000e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e52:	89ab      	ldrh	r3, [r5, #12]
 8000e54:	0598      	lsls	r0, r3, #22
 8000e56:	d4f7      	bmi.n	8000e48 <_vfiprintf_r+0x44>
 8000e58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000e5a:	f7ff feaf 	bl	8000bbc <__retarget_lock_release_recursive>
 8000e5e:	e7f3      	b.n	8000e48 <_vfiprintf_r+0x44>
 8000e60:	2300      	movs	r3, #0
 8000e62:	9309      	str	r3, [sp, #36]	; 0x24
 8000e64:	2320      	movs	r3, #32
 8000e66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000e6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8000e6e:	2330      	movs	r3, #48	; 0x30
 8000e70:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8001024 <_vfiprintf_r+0x220>
 8000e74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000e78:	f04f 0901 	mov.w	r9, #1
 8000e7c:	4623      	mov	r3, r4
 8000e7e:	469a      	mov	sl, r3
 8000e80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e84:	b10a      	cbz	r2, 8000e8a <_vfiprintf_r+0x86>
 8000e86:	2a25      	cmp	r2, #37	; 0x25
 8000e88:	d1f9      	bne.n	8000e7e <_vfiprintf_r+0x7a>
 8000e8a:	ebba 0b04 	subs.w	fp, sl, r4
 8000e8e:	d00b      	beq.n	8000ea8 <_vfiprintf_r+0xa4>
 8000e90:	465b      	mov	r3, fp
 8000e92:	4622      	mov	r2, r4
 8000e94:	4629      	mov	r1, r5
 8000e96:	4630      	mov	r0, r6
 8000e98:	f7ff ffa1 	bl	8000dde <__sfputs_r>
 8000e9c:	3001      	adds	r0, #1
 8000e9e:	f000 80a9 	beq.w	8000ff4 <_vfiprintf_r+0x1f0>
 8000ea2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000ea4:	445a      	add	r2, fp
 8000ea6:	9209      	str	r2, [sp, #36]	; 0x24
 8000ea8:	f89a 3000 	ldrb.w	r3, [sl]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	f000 80a1 	beq.w	8000ff4 <_vfiprintf_r+0x1f0>
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000ebc:	f10a 0a01 	add.w	sl, sl, #1
 8000ec0:	9304      	str	r3, [sp, #16]
 8000ec2:	9307      	str	r3, [sp, #28]
 8000ec4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000ec8:	931a      	str	r3, [sp, #104]	; 0x68
 8000eca:	4654      	mov	r4, sl
 8000ecc:	2205      	movs	r2, #5
 8000ece:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ed2:	4854      	ldr	r0, [pc, #336]	; (8001024 <_vfiprintf_r+0x220>)
 8000ed4:	f7ff f97c 	bl	80001d0 <memchr>
 8000ed8:	9a04      	ldr	r2, [sp, #16]
 8000eda:	b9d8      	cbnz	r0, 8000f14 <_vfiprintf_r+0x110>
 8000edc:	06d1      	lsls	r1, r2, #27
 8000ede:	bf44      	itt	mi
 8000ee0:	2320      	movmi	r3, #32
 8000ee2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000ee6:	0713      	lsls	r3, r2, #28
 8000ee8:	bf44      	itt	mi
 8000eea:	232b      	movmi	r3, #43	; 0x2b
 8000eec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000ef0:	f89a 3000 	ldrb.w	r3, [sl]
 8000ef4:	2b2a      	cmp	r3, #42	; 0x2a
 8000ef6:	d015      	beq.n	8000f24 <_vfiprintf_r+0x120>
 8000ef8:	9a07      	ldr	r2, [sp, #28]
 8000efa:	4654      	mov	r4, sl
 8000efc:	2000      	movs	r0, #0
 8000efe:	f04f 0c0a 	mov.w	ip, #10
 8000f02:	4621      	mov	r1, r4
 8000f04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000f08:	3b30      	subs	r3, #48	; 0x30
 8000f0a:	2b09      	cmp	r3, #9
 8000f0c:	d94d      	bls.n	8000faa <_vfiprintf_r+0x1a6>
 8000f0e:	b1b0      	cbz	r0, 8000f3e <_vfiprintf_r+0x13a>
 8000f10:	9207      	str	r2, [sp, #28]
 8000f12:	e014      	b.n	8000f3e <_vfiprintf_r+0x13a>
 8000f14:	eba0 0308 	sub.w	r3, r0, r8
 8000f18:	fa09 f303 	lsl.w	r3, r9, r3
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	9304      	str	r3, [sp, #16]
 8000f20:	46a2      	mov	sl, r4
 8000f22:	e7d2      	b.n	8000eca <_vfiprintf_r+0xc6>
 8000f24:	9b03      	ldr	r3, [sp, #12]
 8000f26:	1d19      	adds	r1, r3, #4
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	9103      	str	r1, [sp, #12]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	bfbb      	ittet	lt
 8000f30:	425b      	neglt	r3, r3
 8000f32:	f042 0202 	orrlt.w	r2, r2, #2
 8000f36:	9307      	strge	r3, [sp, #28]
 8000f38:	9307      	strlt	r3, [sp, #28]
 8000f3a:	bfb8      	it	lt
 8000f3c:	9204      	strlt	r2, [sp, #16]
 8000f3e:	7823      	ldrb	r3, [r4, #0]
 8000f40:	2b2e      	cmp	r3, #46	; 0x2e
 8000f42:	d10c      	bne.n	8000f5e <_vfiprintf_r+0x15a>
 8000f44:	7863      	ldrb	r3, [r4, #1]
 8000f46:	2b2a      	cmp	r3, #42	; 0x2a
 8000f48:	d134      	bne.n	8000fb4 <_vfiprintf_r+0x1b0>
 8000f4a:	9b03      	ldr	r3, [sp, #12]
 8000f4c:	1d1a      	adds	r2, r3, #4
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	9203      	str	r2, [sp, #12]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	bfb8      	it	lt
 8000f56:	f04f 33ff 	movlt.w	r3, #4294967295
 8000f5a:	3402      	adds	r4, #2
 8000f5c:	9305      	str	r3, [sp, #20]
 8000f5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8001034 <_vfiprintf_r+0x230>
 8000f62:	7821      	ldrb	r1, [r4, #0]
 8000f64:	2203      	movs	r2, #3
 8000f66:	4650      	mov	r0, sl
 8000f68:	f7ff f932 	bl	80001d0 <memchr>
 8000f6c:	b138      	cbz	r0, 8000f7e <_vfiprintf_r+0x17a>
 8000f6e:	9b04      	ldr	r3, [sp, #16]
 8000f70:	eba0 000a 	sub.w	r0, r0, sl
 8000f74:	2240      	movs	r2, #64	; 0x40
 8000f76:	4082      	lsls	r2, r0
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	3401      	adds	r4, #1
 8000f7c:	9304      	str	r3, [sp, #16]
 8000f7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f82:	4829      	ldr	r0, [pc, #164]	; (8001028 <_vfiprintf_r+0x224>)
 8000f84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000f88:	2206      	movs	r2, #6
 8000f8a:	f7ff f921 	bl	80001d0 <memchr>
 8000f8e:	2800      	cmp	r0, #0
 8000f90:	d03f      	beq.n	8001012 <_vfiprintf_r+0x20e>
 8000f92:	4b26      	ldr	r3, [pc, #152]	; (800102c <_vfiprintf_r+0x228>)
 8000f94:	bb1b      	cbnz	r3, 8000fde <_vfiprintf_r+0x1da>
 8000f96:	9b03      	ldr	r3, [sp, #12]
 8000f98:	3307      	adds	r3, #7
 8000f9a:	f023 0307 	bic.w	r3, r3, #7
 8000f9e:	3308      	adds	r3, #8
 8000fa0:	9303      	str	r3, [sp, #12]
 8000fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000fa4:	443b      	add	r3, r7
 8000fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8000fa8:	e768      	b.n	8000e7c <_vfiprintf_r+0x78>
 8000faa:	fb0c 3202 	mla	r2, ip, r2, r3
 8000fae:	460c      	mov	r4, r1
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	e7a6      	b.n	8000f02 <_vfiprintf_r+0xfe>
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	3401      	adds	r4, #1
 8000fb8:	9305      	str	r3, [sp, #20]
 8000fba:	4619      	mov	r1, r3
 8000fbc:	f04f 0c0a 	mov.w	ip, #10
 8000fc0:	4620      	mov	r0, r4
 8000fc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000fc6:	3a30      	subs	r2, #48	; 0x30
 8000fc8:	2a09      	cmp	r2, #9
 8000fca:	d903      	bls.n	8000fd4 <_vfiprintf_r+0x1d0>
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d0c6      	beq.n	8000f5e <_vfiprintf_r+0x15a>
 8000fd0:	9105      	str	r1, [sp, #20]
 8000fd2:	e7c4      	b.n	8000f5e <_vfiprintf_r+0x15a>
 8000fd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8000fd8:	4604      	mov	r4, r0
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e7f0      	b.n	8000fc0 <_vfiprintf_r+0x1bc>
 8000fde:	ab03      	add	r3, sp, #12
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	462a      	mov	r2, r5
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <_vfiprintf_r+0x22c>)
 8000fe6:	a904      	add	r1, sp, #16
 8000fe8:	4630      	mov	r0, r6
 8000fea:	f3af 8000 	nop.w
 8000fee:	4607      	mov	r7, r0
 8000ff0:	1c78      	adds	r0, r7, #1
 8000ff2:	d1d6      	bne.n	8000fa2 <_vfiprintf_r+0x19e>
 8000ff4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000ff6:	07d9      	lsls	r1, r3, #31
 8000ff8:	d405      	bmi.n	8001006 <_vfiprintf_r+0x202>
 8000ffa:	89ab      	ldrh	r3, [r5, #12]
 8000ffc:	059a      	lsls	r2, r3, #22
 8000ffe:	d402      	bmi.n	8001006 <_vfiprintf_r+0x202>
 8001000:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001002:	f7ff fddb 	bl	8000bbc <__retarget_lock_release_recursive>
 8001006:	89ab      	ldrh	r3, [r5, #12]
 8001008:	065b      	lsls	r3, r3, #25
 800100a:	f53f af1d 	bmi.w	8000e48 <_vfiprintf_r+0x44>
 800100e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001010:	e71c      	b.n	8000e4c <_vfiprintf_r+0x48>
 8001012:	ab03      	add	r3, sp, #12
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	462a      	mov	r2, r5
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <_vfiprintf_r+0x22c>)
 800101a:	a904      	add	r1, sp, #16
 800101c:	4630      	mov	r0, r6
 800101e:	f000 f879 	bl	8001114 <_printf_i>
 8001022:	e7e4      	b.n	8000fee <_vfiprintf_r+0x1ea>
 8001024:	08001726 	.word	0x08001726
 8001028:	08001730 	.word	0x08001730
 800102c:	00000000 	.word	0x00000000
 8001030:	08000ddf 	.word	0x08000ddf
 8001034:	0800172c 	.word	0x0800172c

08001038 <_printf_common>:
 8001038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800103c:	4616      	mov	r6, r2
 800103e:	4699      	mov	r9, r3
 8001040:	688a      	ldr	r2, [r1, #8]
 8001042:	690b      	ldr	r3, [r1, #16]
 8001044:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001048:	4293      	cmp	r3, r2
 800104a:	bfb8      	it	lt
 800104c:	4613      	movlt	r3, r2
 800104e:	6033      	str	r3, [r6, #0]
 8001050:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001054:	4607      	mov	r7, r0
 8001056:	460c      	mov	r4, r1
 8001058:	b10a      	cbz	r2, 800105e <_printf_common+0x26>
 800105a:	3301      	adds	r3, #1
 800105c:	6033      	str	r3, [r6, #0]
 800105e:	6823      	ldr	r3, [r4, #0]
 8001060:	0699      	lsls	r1, r3, #26
 8001062:	bf42      	ittt	mi
 8001064:	6833      	ldrmi	r3, [r6, #0]
 8001066:	3302      	addmi	r3, #2
 8001068:	6033      	strmi	r3, [r6, #0]
 800106a:	6825      	ldr	r5, [r4, #0]
 800106c:	f015 0506 	ands.w	r5, r5, #6
 8001070:	d106      	bne.n	8001080 <_printf_common+0x48>
 8001072:	f104 0a19 	add.w	sl, r4, #25
 8001076:	68e3      	ldr	r3, [r4, #12]
 8001078:	6832      	ldr	r2, [r6, #0]
 800107a:	1a9b      	subs	r3, r3, r2
 800107c:	42ab      	cmp	r3, r5
 800107e:	dc26      	bgt.n	80010ce <_printf_common+0x96>
 8001080:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001084:	1e13      	subs	r3, r2, #0
 8001086:	6822      	ldr	r2, [r4, #0]
 8001088:	bf18      	it	ne
 800108a:	2301      	movne	r3, #1
 800108c:	0692      	lsls	r2, r2, #26
 800108e:	d42b      	bmi.n	80010e8 <_printf_common+0xb0>
 8001090:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001094:	4649      	mov	r1, r9
 8001096:	4638      	mov	r0, r7
 8001098:	47c0      	blx	r8
 800109a:	3001      	adds	r0, #1
 800109c:	d01e      	beq.n	80010dc <_printf_common+0xa4>
 800109e:	6823      	ldr	r3, [r4, #0]
 80010a0:	6922      	ldr	r2, [r4, #16]
 80010a2:	f003 0306 	and.w	r3, r3, #6
 80010a6:	2b04      	cmp	r3, #4
 80010a8:	bf02      	ittt	eq
 80010aa:	68e5      	ldreq	r5, [r4, #12]
 80010ac:	6833      	ldreq	r3, [r6, #0]
 80010ae:	1aed      	subeq	r5, r5, r3
 80010b0:	68a3      	ldr	r3, [r4, #8]
 80010b2:	bf0c      	ite	eq
 80010b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80010b8:	2500      	movne	r5, #0
 80010ba:	4293      	cmp	r3, r2
 80010bc:	bfc4      	itt	gt
 80010be:	1a9b      	subgt	r3, r3, r2
 80010c0:	18ed      	addgt	r5, r5, r3
 80010c2:	2600      	movs	r6, #0
 80010c4:	341a      	adds	r4, #26
 80010c6:	42b5      	cmp	r5, r6
 80010c8:	d11a      	bne.n	8001100 <_printf_common+0xc8>
 80010ca:	2000      	movs	r0, #0
 80010cc:	e008      	b.n	80010e0 <_printf_common+0xa8>
 80010ce:	2301      	movs	r3, #1
 80010d0:	4652      	mov	r2, sl
 80010d2:	4649      	mov	r1, r9
 80010d4:	4638      	mov	r0, r7
 80010d6:	47c0      	blx	r8
 80010d8:	3001      	adds	r0, #1
 80010da:	d103      	bne.n	80010e4 <_printf_common+0xac>
 80010dc:	f04f 30ff 	mov.w	r0, #4294967295
 80010e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010e4:	3501      	adds	r5, #1
 80010e6:	e7c6      	b.n	8001076 <_printf_common+0x3e>
 80010e8:	18e1      	adds	r1, r4, r3
 80010ea:	1c5a      	adds	r2, r3, #1
 80010ec:	2030      	movs	r0, #48	; 0x30
 80010ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80010f2:	4422      	add	r2, r4
 80010f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80010f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80010fc:	3302      	adds	r3, #2
 80010fe:	e7c7      	b.n	8001090 <_printf_common+0x58>
 8001100:	2301      	movs	r3, #1
 8001102:	4622      	mov	r2, r4
 8001104:	4649      	mov	r1, r9
 8001106:	4638      	mov	r0, r7
 8001108:	47c0      	blx	r8
 800110a:	3001      	adds	r0, #1
 800110c:	d0e6      	beq.n	80010dc <_printf_common+0xa4>
 800110e:	3601      	adds	r6, #1
 8001110:	e7d9      	b.n	80010c6 <_printf_common+0x8e>
	...

08001114 <_printf_i>:
 8001114:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001118:	7e0f      	ldrb	r7, [r1, #24]
 800111a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800111c:	2f78      	cmp	r7, #120	; 0x78
 800111e:	4691      	mov	r9, r2
 8001120:	4680      	mov	r8, r0
 8001122:	460c      	mov	r4, r1
 8001124:	469a      	mov	sl, r3
 8001126:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800112a:	d807      	bhi.n	800113c <_printf_i+0x28>
 800112c:	2f62      	cmp	r7, #98	; 0x62
 800112e:	d80a      	bhi.n	8001146 <_printf_i+0x32>
 8001130:	2f00      	cmp	r7, #0
 8001132:	f000 80d4 	beq.w	80012de <_printf_i+0x1ca>
 8001136:	2f58      	cmp	r7, #88	; 0x58
 8001138:	f000 80c0 	beq.w	80012bc <_printf_i+0x1a8>
 800113c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001140:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001144:	e03a      	b.n	80011bc <_printf_i+0xa8>
 8001146:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800114a:	2b15      	cmp	r3, #21
 800114c:	d8f6      	bhi.n	800113c <_printf_i+0x28>
 800114e:	a101      	add	r1, pc, #4	; (adr r1, 8001154 <_printf_i+0x40>)
 8001150:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001154:	080011ad 	.word	0x080011ad
 8001158:	080011c1 	.word	0x080011c1
 800115c:	0800113d 	.word	0x0800113d
 8001160:	0800113d 	.word	0x0800113d
 8001164:	0800113d 	.word	0x0800113d
 8001168:	0800113d 	.word	0x0800113d
 800116c:	080011c1 	.word	0x080011c1
 8001170:	0800113d 	.word	0x0800113d
 8001174:	0800113d 	.word	0x0800113d
 8001178:	0800113d 	.word	0x0800113d
 800117c:	0800113d 	.word	0x0800113d
 8001180:	080012c5 	.word	0x080012c5
 8001184:	080011ed 	.word	0x080011ed
 8001188:	0800127f 	.word	0x0800127f
 800118c:	0800113d 	.word	0x0800113d
 8001190:	0800113d 	.word	0x0800113d
 8001194:	080012e7 	.word	0x080012e7
 8001198:	0800113d 	.word	0x0800113d
 800119c:	080011ed 	.word	0x080011ed
 80011a0:	0800113d 	.word	0x0800113d
 80011a4:	0800113d 	.word	0x0800113d
 80011a8:	08001287 	.word	0x08001287
 80011ac:	682b      	ldr	r3, [r5, #0]
 80011ae:	1d1a      	adds	r2, r3, #4
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	602a      	str	r2, [r5, #0]
 80011b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80011b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80011bc:	2301      	movs	r3, #1
 80011be:	e09f      	b.n	8001300 <_printf_i+0x1ec>
 80011c0:	6820      	ldr	r0, [r4, #0]
 80011c2:	682b      	ldr	r3, [r5, #0]
 80011c4:	0607      	lsls	r7, r0, #24
 80011c6:	f103 0104 	add.w	r1, r3, #4
 80011ca:	6029      	str	r1, [r5, #0]
 80011cc:	d501      	bpl.n	80011d2 <_printf_i+0xbe>
 80011ce:	681e      	ldr	r6, [r3, #0]
 80011d0:	e003      	b.n	80011da <_printf_i+0xc6>
 80011d2:	0646      	lsls	r6, r0, #25
 80011d4:	d5fb      	bpl.n	80011ce <_printf_i+0xba>
 80011d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80011da:	2e00      	cmp	r6, #0
 80011dc:	da03      	bge.n	80011e6 <_printf_i+0xd2>
 80011de:	232d      	movs	r3, #45	; 0x2d
 80011e0:	4276      	negs	r6, r6
 80011e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80011e6:	485a      	ldr	r0, [pc, #360]	; (8001350 <_printf_i+0x23c>)
 80011e8:	230a      	movs	r3, #10
 80011ea:	e012      	b.n	8001212 <_printf_i+0xfe>
 80011ec:	682b      	ldr	r3, [r5, #0]
 80011ee:	6820      	ldr	r0, [r4, #0]
 80011f0:	1d19      	adds	r1, r3, #4
 80011f2:	6029      	str	r1, [r5, #0]
 80011f4:	0605      	lsls	r5, r0, #24
 80011f6:	d501      	bpl.n	80011fc <_printf_i+0xe8>
 80011f8:	681e      	ldr	r6, [r3, #0]
 80011fa:	e002      	b.n	8001202 <_printf_i+0xee>
 80011fc:	0641      	lsls	r1, r0, #25
 80011fe:	d5fb      	bpl.n	80011f8 <_printf_i+0xe4>
 8001200:	881e      	ldrh	r6, [r3, #0]
 8001202:	4853      	ldr	r0, [pc, #332]	; (8001350 <_printf_i+0x23c>)
 8001204:	2f6f      	cmp	r7, #111	; 0x6f
 8001206:	bf0c      	ite	eq
 8001208:	2308      	moveq	r3, #8
 800120a:	230a      	movne	r3, #10
 800120c:	2100      	movs	r1, #0
 800120e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001212:	6865      	ldr	r5, [r4, #4]
 8001214:	60a5      	str	r5, [r4, #8]
 8001216:	2d00      	cmp	r5, #0
 8001218:	bfa2      	ittt	ge
 800121a:	6821      	ldrge	r1, [r4, #0]
 800121c:	f021 0104 	bicge.w	r1, r1, #4
 8001220:	6021      	strge	r1, [r4, #0]
 8001222:	b90e      	cbnz	r6, 8001228 <_printf_i+0x114>
 8001224:	2d00      	cmp	r5, #0
 8001226:	d04b      	beq.n	80012c0 <_printf_i+0x1ac>
 8001228:	4615      	mov	r5, r2
 800122a:	fbb6 f1f3 	udiv	r1, r6, r3
 800122e:	fb03 6711 	mls	r7, r3, r1, r6
 8001232:	5dc7      	ldrb	r7, [r0, r7]
 8001234:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001238:	4637      	mov	r7, r6
 800123a:	42bb      	cmp	r3, r7
 800123c:	460e      	mov	r6, r1
 800123e:	d9f4      	bls.n	800122a <_printf_i+0x116>
 8001240:	2b08      	cmp	r3, #8
 8001242:	d10b      	bne.n	800125c <_printf_i+0x148>
 8001244:	6823      	ldr	r3, [r4, #0]
 8001246:	07de      	lsls	r6, r3, #31
 8001248:	d508      	bpl.n	800125c <_printf_i+0x148>
 800124a:	6923      	ldr	r3, [r4, #16]
 800124c:	6861      	ldr	r1, [r4, #4]
 800124e:	4299      	cmp	r1, r3
 8001250:	bfde      	ittt	le
 8001252:	2330      	movle	r3, #48	; 0x30
 8001254:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001258:	f105 35ff 	addle.w	r5, r5, #4294967295
 800125c:	1b52      	subs	r2, r2, r5
 800125e:	6122      	str	r2, [r4, #16]
 8001260:	f8cd a000 	str.w	sl, [sp]
 8001264:	464b      	mov	r3, r9
 8001266:	aa03      	add	r2, sp, #12
 8001268:	4621      	mov	r1, r4
 800126a:	4640      	mov	r0, r8
 800126c:	f7ff fee4 	bl	8001038 <_printf_common>
 8001270:	3001      	adds	r0, #1
 8001272:	d14a      	bne.n	800130a <_printf_i+0x1f6>
 8001274:	f04f 30ff 	mov.w	r0, #4294967295
 8001278:	b004      	add	sp, #16
 800127a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800127e:	6823      	ldr	r3, [r4, #0]
 8001280:	f043 0320 	orr.w	r3, r3, #32
 8001284:	6023      	str	r3, [r4, #0]
 8001286:	4833      	ldr	r0, [pc, #204]	; (8001354 <_printf_i+0x240>)
 8001288:	2778      	movs	r7, #120	; 0x78
 800128a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800128e:	6823      	ldr	r3, [r4, #0]
 8001290:	6829      	ldr	r1, [r5, #0]
 8001292:	061f      	lsls	r7, r3, #24
 8001294:	f851 6b04 	ldr.w	r6, [r1], #4
 8001298:	d402      	bmi.n	80012a0 <_printf_i+0x18c>
 800129a:	065f      	lsls	r7, r3, #25
 800129c:	bf48      	it	mi
 800129e:	b2b6      	uxthmi	r6, r6
 80012a0:	07df      	lsls	r7, r3, #31
 80012a2:	bf48      	it	mi
 80012a4:	f043 0320 	orrmi.w	r3, r3, #32
 80012a8:	6029      	str	r1, [r5, #0]
 80012aa:	bf48      	it	mi
 80012ac:	6023      	strmi	r3, [r4, #0]
 80012ae:	b91e      	cbnz	r6, 80012b8 <_printf_i+0x1a4>
 80012b0:	6823      	ldr	r3, [r4, #0]
 80012b2:	f023 0320 	bic.w	r3, r3, #32
 80012b6:	6023      	str	r3, [r4, #0]
 80012b8:	2310      	movs	r3, #16
 80012ba:	e7a7      	b.n	800120c <_printf_i+0xf8>
 80012bc:	4824      	ldr	r0, [pc, #144]	; (8001350 <_printf_i+0x23c>)
 80012be:	e7e4      	b.n	800128a <_printf_i+0x176>
 80012c0:	4615      	mov	r5, r2
 80012c2:	e7bd      	b.n	8001240 <_printf_i+0x12c>
 80012c4:	682b      	ldr	r3, [r5, #0]
 80012c6:	6826      	ldr	r6, [r4, #0]
 80012c8:	6961      	ldr	r1, [r4, #20]
 80012ca:	1d18      	adds	r0, r3, #4
 80012cc:	6028      	str	r0, [r5, #0]
 80012ce:	0635      	lsls	r5, r6, #24
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	d501      	bpl.n	80012d8 <_printf_i+0x1c4>
 80012d4:	6019      	str	r1, [r3, #0]
 80012d6:	e002      	b.n	80012de <_printf_i+0x1ca>
 80012d8:	0670      	lsls	r0, r6, #25
 80012da:	d5fb      	bpl.n	80012d4 <_printf_i+0x1c0>
 80012dc:	8019      	strh	r1, [r3, #0]
 80012de:	2300      	movs	r3, #0
 80012e0:	6123      	str	r3, [r4, #16]
 80012e2:	4615      	mov	r5, r2
 80012e4:	e7bc      	b.n	8001260 <_printf_i+0x14c>
 80012e6:	682b      	ldr	r3, [r5, #0]
 80012e8:	1d1a      	adds	r2, r3, #4
 80012ea:	602a      	str	r2, [r5, #0]
 80012ec:	681d      	ldr	r5, [r3, #0]
 80012ee:	6862      	ldr	r2, [r4, #4]
 80012f0:	2100      	movs	r1, #0
 80012f2:	4628      	mov	r0, r5
 80012f4:	f7fe ff6c 	bl	80001d0 <memchr>
 80012f8:	b108      	cbz	r0, 80012fe <_printf_i+0x1ea>
 80012fa:	1b40      	subs	r0, r0, r5
 80012fc:	6060      	str	r0, [r4, #4]
 80012fe:	6863      	ldr	r3, [r4, #4]
 8001300:	6123      	str	r3, [r4, #16]
 8001302:	2300      	movs	r3, #0
 8001304:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001308:	e7aa      	b.n	8001260 <_printf_i+0x14c>
 800130a:	6923      	ldr	r3, [r4, #16]
 800130c:	462a      	mov	r2, r5
 800130e:	4649      	mov	r1, r9
 8001310:	4640      	mov	r0, r8
 8001312:	47d0      	blx	sl
 8001314:	3001      	adds	r0, #1
 8001316:	d0ad      	beq.n	8001274 <_printf_i+0x160>
 8001318:	6823      	ldr	r3, [r4, #0]
 800131a:	079b      	lsls	r3, r3, #30
 800131c:	d413      	bmi.n	8001346 <_printf_i+0x232>
 800131e:	68e0      	ldr	r0, [r4, #12]
 8001320:	9b03      	ldr	r3, [sp, #12]
 8001322:	4298      	cmp	r0, r3
 8001324:	bfb8      	it	lt
 8001326:	4618      	movlt	r0, r3
 8001328:	e7a6      	b.n	8001278 <_printf_i+0x164>
 800132a:	2301      	movs	r3, #1
 800132c:	4632      	mov	r2, r6
 800132e:	4649      	mov	r1, r9
 8001330:	4640      	mov	r0, r8
 8001332:	47d0      	blx	sl
 8001334:	3001      	adds	r0, #1
 8001336:	d09d      	beq.n	8001274 <_printf_i+0x160>
 8001338:	3501      	adds	r5, #1
 800133a:	68e3      	ldr	r3, [r4, #12]
 800133c:	9903      	ldr	r1, [sp, #12]
 800133e:	1a5b      	subs	r3, r3, r1
 8001340:	42ab      	cmp	r3, r5
 8001342:	dcf2      	bgt.n	800132a <_printf_i+0x216>
 8001344:	e7eb      	b.n	800131e <_printf_i+0x20a>
 8001346:	2500      	movs	r5, #0
 8001348:	f104 0619 	add.w	r6, r4, #25
 800134c:	e7f5      	b.n	800133a <_printf_i+0x226>
 800134e:	bf00      	nop
 8001350:	08001737 	.word	0x08001737
 8001354:	08001748 	.word	0x08001748

08001358 <__sflush_r>:
 8001358:	898a      	ldrh	r2, [r1, #12]
 800135a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800135e:	4605      	mov	r5, r0
 8001360:	0710      	lsls	r0, r2, #28
 8001362:	460c      	mov	r4, r1
 8001364:	d458      	bmi.n	8001418 <__sflush_r+0xc0>
 8001366:	684b      	ldr	r3, [r1, #4]
 8001368:	2b00      	cmp	r3, #0
 800136a:	dc05      	bgt.n	8001378 <__sflush_r+0x20>
 800136c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800136e:	2b00      	cmp	r3, #0
 8001370:	dc02      	bgt.n	8001378 <__sflush_r+0x20>
 8001372:	2000      	movs	r0, #0
 8001374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001378:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800137a:	2e00      	cmp	r6, #0
 800137c:	d0f9      	beq.n	8001372 <__sflush_r+0x1a>
 800137e:	2300      	movs	r3, #0
 8001380:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001384:	682f      	ldr	r7, [r5, #0]
 8001386:	6a21      	ldr	r1, [r4, #32]
 8001388:	602b      	str	r3, [r5, #0]
 800138a:	d032      	beq.n	80013f2 <__sflush_r+0x9a>
 800138c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800138e:	89a3      	ldrh	r3, [r4, #12]
 8001390:	075a      	lsls	r2, r3, #29
 8001392:	d505      	bpl.n	80013a0 <__sflush_r+0x48>
 8001394:	6863      	ldr	r3, [r4, #4]
 8001396:	1ac0      	subs	r0, r0, r3
 8001398:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800139a:	b10b      	cbz	r3, 80013a0 <__sflush_r+0x48>
 800139c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800139e:	1ac0      	subs	r0, r0, r3
 80013a0:	2300      	movs	r3, #0
 80013a2:	4602      	mov	r2, r0
 80013a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80013a6:	6a21      	ldr	r1, [r4, #32]
 80013a8:	4628      	mov	r0, r5
 80013aa:	47b0      	blx	r6
 80013ac:	1c43      	adds	r3, r0, #1
 80013ae:	89a3      	ldrh	r3, [r4, #12]
 80013b0:	d106      	bne.n	80013c0 <__sflush_r+0x68>
 80013b2:	6829      	ldr	r1, [r5, #0]
 80013b4:	291d      	cmp	r1, #29
 80013b6:	d82b      	bhi.n	8001410 <__sflush_r+0xb8>
 80013b8:	4a29      	ldr	r2, [pc, #164]	; (8001460 <__sflush_r+0x108>)
 80013ba:	410a      	asrs	r2, r1
 80013bc:	07d6      	lsls	r6, r2, #31
 80013be:	d427      	bmi.n	8001410 <__sflush_r+0xb8>
 80013c0:	2200      	movs	r2, #0
 80013c2:	6062      	str	r2, [r4, #4]
 80013c4:	04d9      	lsls	r1, r3, #19
 80013c6:	6922      	ldr	r2, [r4, #16]
 80013c8:	6022      	str	r2, [r4, #0]
 80013ca:	d504      	bpl.n	80013d6 <__sflush_r+0x7e>
 80013cc:	1c42      	adds	r2, r0, #1
 80013ce:	d101      	bne.n	80013d4 <__sflush_r+0x7c>
 80013d0:	682b      	ldr	r3, [r5, #0]
 80013d2:	b903      	cbnz	r3, 80013d6 <__sflush_r+0x7e>
 80013d4:	6560      	str	r0, [r4, #84]	; 0x54
 80013d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80013d8:	602f      	str	r7, [r5, #0]
 80013da:	2900      	cmp	r1, #0
 80013dc:	d0c9      	beq.n	8001372 <__sflush_r+0x1a>
 80013de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80013e2:	4299      	cmp	r1, r3
 80013e4:	d002      	beq.n	80013ec <__sflush_r+0x94>
 80013e6:	4628      	mov	r0, r5
 80013e8:	f7ff fbea 	bl	8000bc0 <_free_r>
 80013ec:	2000      	movs	r0, #0
 80013ee:	6360      	str	r0, [r4, #52]	; 0x34
 80013f0:	e7c0      	b.n	8001374 <__sflush_r+0x1c>
 80013f2:	2301      	movs	r3, #1
 80013f4:	4628      	mov	r0, r5
 80013f6:	47b0      	blx	r6
 80013f8:	1c41      	adds	r1, r0, #1
 80013fa:	d1c8      	bne.n	800138e <__sflush_r+0x36>
 80013fc:	682b      	ldr	r3, [r5, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d0c5      	beq.n	800138e <__sflush_r+0x36>
 8001402:	2b1d      	cmp	r3, #29
 8001404:	d001      	beq.n	800140a <__sflush_r+0xb2>
 8001406:	2b16      	cmp	r3, #22
 8001408:	d101      	bne.n	800140e <__sflush_r+0xb6>
 800140a:	602f      	str	r7, [r5, #0]
 800140c:	e7b1      	b.n	8001372 <__sflush_r+0x1a>
 800140e:	89a3      	ldrh	r3, [r4, #12]
 8001410:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001414:	81a3      	strh	r3, [r4, #12]
 8001416:	e7ad      	b.n	8001374 <__sflush_r+0x1c>
 8001418:	690f      	ldr	r7, [r1, #16]
 800141a:	2f00      	cmp	r7, #0
 800141c:	d0a9      	beq.n	8001372 <__sflush_r+0x1a>
 800141e:	0793      	lsls	r3, r2, #30
 8001420:	680e      	ldr	r6, [r1, #0]
 8001422:	bf08      	it	eq
 8001424:	694b      	ldreq	r3, [r1, #20]
 8001426:	600f      	str	r7, [r1, #0]
 8001428:	bf18      	it	ne
 800142a:	2300      	movne	r3, #0
 800142c:	eba6 0807 	sub.w	r8, r6, r7
 8001430:	608b      	str	r3, [r1, #8]
 8001432:	f1b8 0f00 	cmp.w	r8, #0
 8001436:	dd9c      	ble.n	8001372 <__sflush_r+0x1a>
 8001438:	6a21      	ldr	r1, [r4, #32]
 800143a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800143c:	4643      	mov	r3, r8
 800143e:	463a      	mov	r2, r7
 8001440:	4628      	mov	r0, r5
 8001442:	47b0      	blx	r6
 8001444:	2800      	cmp	r0, #0
 8001446:	dc06      	bgt.n	8001456 <__sflush_r+0xfe>
 8001448:	89a3      	ldrh	r3, [r4, #12]
 800144a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800144e:	81a3      	strh	r3, [r4, #12]
 8001450:	f04f 30ff 	mov.w	r0, #4294967295
 8001454:	e78e      	b.n	8001374 <__sflush_r+0x1c>
 8001456:	4407      	add	r7, r0
 8001458:	eba8 0800 	sub.w	r8, r8, r0
 800145c:	e7e9      	b.n	8001432 <__sflush_r+0xda>
 800145e:	bf00      	nop
 8001460:	dfbffffe 	.word	0xdfbffffe

08001464 <_fflush_r>:
 8001464:	b538      	push	{r3, r4, r5, lr}
 8001466:	690b      	ldr	r3, [r1, #16]
 8001468:	4605      	mov	r5, r0
 800146a:	460c      	mov	r4, r1
 800146c:	b913      	cbnz	r3, 8001474 <_fflush_r+0x10>
 800146e:	2500      	movs	r5, #0
 8001470:	4628      	mov	r0, r5
 8001472:	bd38      	pop	{r3, r4, r5, pc}
 8001474:	b118      	cbz	r0, 800147e <_fflush_r+0x1a>
 8001476:	6a03      	ldr	r3, [r0, #32]
 8001478:	b90b      	cbnz	r3, 800147e <_fflush_r+0x1a>
 800147a:	f7ff fa99 	bl	80009b0 <__sinit>
 800147e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d0f3      	beq.n	800146e <_fflush_r+0xa>
 8001486:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001488:	07d0      	lsls	r0, r2, #31
 800148a:	d404      	bmi.n	8001496 <_fflush_r+0x32>
 800148c:	0599      	lsls	r1, r3, #22
 800148e:	d402      	bmi.n	8001496 <_fflush_r+0x32>
 8001490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001492:	f7ff fb92 	bl	8000bba <__retarget_lock_acquire_recursive>
 8001496:	4628      	mov	r0, r5
 8001498:	4621      	mov	r1, r4
 800149a:	f7ff ff5d 	bl	8001358 <__sflush_r>
 800149e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80014a0:	07da      	lsls	r2, r3, #31
 80014a2:	4605      	mov	r5, r0
 80014a4:	d4e4      	bmi.n	8001470 <_fflush_r+0xc>
 80014a6:	89a3      	ldrh	r3, [r4, #12]
 80014a8:	059b      	lsls	r3, r3, #22
 80014aa:	d4e1      	bmi.n	8001470 <_fflush_r+0xc>
 80014ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80014ae:	f7ff fb85 	bl	8000bbc <__retarget_lock_release_recursive>
 80014b2:	e7dd      	b.n	8001470 <_fflush_r+0xc>

080014b4 <__swbuf_r>:
 80014b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014b6:	460e      	mov	r6, r1
 80014b8:	4614      	mov	r4, r2
 80014ba:	4605      	mov	r5, r0
 80014bc:	b118      	cbz	r0, 80014c6 <__swbuf_r+0x12>
 80014be:	6a03      	ldr	r3, [r0, #32]
 80014c0:	b90b      	cbnz	r3, 80014c6 <__swbuf_r+0x12>
 80014c2:	f7ff fa75 	bl	80009b0 <__sinit>
 80014c6:	69a3      	ldr	r3, [r4, #24]
 80014c8:	60a3      	str	r3, [r4, #8]
 80014ca:	89a3      	ldrh	r3, [r4, #12]
 80014cc:	071a      	lsls	r2, r3, #28
 80014ce:	d525      	bpl.n	800151c <__swbuf_r+0x68>
 80014d0:	6923      	ldr	r3, [r4, #16]
 80014d2:	b31b      	cbz	r3, 800151c <__swbuf_r+0x68>
 80014d4:	6823      	ldr	r3, [r4, #0]
 80014d6:	6922      	ldr	r2, [r4, #16]
 80014d8:	1a98      	subs	r0, r3, r2
 80014da:	6963      	ldr	r3, [r4, #20]
 80014dc:	b2f6      	uxtb	r6, r6
 80014de:	4283      	cmp	r3, r0
 80014e0:	4637      	mov	r7, r6
 80014e2:	dc04      	bgt.n	80014ee <__swbuf_r+0x3a>
 80014e4:	4621      	mov	r1, r4
 80014e6:	4628      	mov	r0, r5
 80014e8:	f7ff ffbc 	bl	8001464 <_fflush_r>
 80014ec:	b9e0      	cbnz	r0, 8001528 <__swbuf_r+0x74>
 80014ee:	68a3      	ldr	r3, [r4, #8]
 80014f0:	3b01      	subs	r3, #1
 80014f2:	60a3      	str	r3, [r4, #8]
 80014f4:	6823      	ldr	r3, [r4, #0]
 80014f6:	1c5a      	adds	r2, r3, #1
 80014f8:	6022      	str	r2, [r4, #0]
 80014fa:	701e      	strb	r6, [r3, #0]
 80014fc:	6962      	ldr	r2, [r4, #20]
 80014fe:	1c43      	adds	r3, r0, #1
 8001500:	429a      	cmp	r2, r3
 8001502:	d004      	beq.n	800150e <__swbuf_r+0x5a>
 8001504:	89a3      	ldrh	r3, [r4, #12]
 8001506:	07db      	lsls	r3, r3, #31
 8001508:	d506      	bpl.n	8001518 <__swbuf_r+0x64>
 800150a:	2e0a      	cmp	r6, #10
 800150c:	d104      	bne.n	8001518 <__swbuf_r+0x64>
 800150e:	4621      	mov	r1, r4
 8001510:	4628      	mov	r0, r5
 8001512:	f7ff ffa7 	bl	8001464 <_fflush_r>
 8001516:	b938      	cbnz	r0, 8001528 <__swbuf_r+0x74>
 8001518:	4638      	mov	r0, r7
 800151a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800151c:	4621      	mov	r1, r4
 800151e:	4628      	mov	r0, r5
 8001520:	f000 f806 	bl	8001530 <__swsetup_r>
 8001524:	2800      	cmp	r0, #0
 8001526:	d0d5      	beq.n	80014d4 <__swbuf_r+0x20>
 8001528:	f04f 37ff 	mov.w	r7, #4294967295
 800152c:	e7f4      	b.n	8001518 <__swbuf_r+0x64>
	...

08001530 <__swsetup_r>:
 8001530:	b538      	push	{r3, r4, r5, lr}
 8001532:	4b2a      	ldr	r3, [pc, #168]	; (80015dc <__swsetup_r+0xac>)
 8001534:	4605      	mov	r5, r0
 8001536:	6818      	ldr	r0, [r3, #0]
 8001538:	460c      	mov	r4, r1
 800153a:	b118      	cbz	r0, 8001544 <__swsetup_r+0x14>
 800153c:	6a03      	ldr	r3, [r0, #32]
 800153e:	b90b      	cbnz	r3, 8001544 <__swsetup_r+0x14>
 8001540:	f7ff fa36 	bl	80009b0 <__sinit>
 8001544:	89a3      	ldrh	r3, [r4, #12]
 8001546:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800154a:	0718      	lsls	r0, r3, #28
 800154c:	d422      	bmi.n	8001594 <__swsetup_r+0x64>
 800154e:	06d9      	lsls	r1, r3, #27
 8001550:	d407      	bmi.n	8001562 <__swsetup_r+0x32>
 8001552:	2309      	movs	r3, #9
 8001554:	602b      	str	r3, [r5, #0]
 8001556:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800155a:	81a3      	strh	r3, [r4, #12]
 800155c:	f04f 30ff 	mov.w	r0, #4294967295
 8001560:	e034      	b.n	80015cc <__swsetup_r+0x9c>
 8001562:	0758      	lsls	r0, r3, #29
 8001564:	d512      	bpl.n	800158c <__swsetup_r+0x5c>
 8001566:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001568:	b141      	cbz	r1, 800157c <__swsetup_r+0x4c>
 800156a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800156e:	4299      	cmp	r1, r3
 8001570:	d002      	beq.n	8001578 <__swsetup_r+0x48>
 8001572:	4628      	mov	r0, r5
 8001574:	f7ff fb24 	bl	8000bc0 <_free_r>
 8001578:	2300      	movs	r3, #0
 800157a:	6363      	str	r3, [r4, #52]	; 0x34
 800157c:	89a3      	ldrh	r3, [r4, #12]
 800157e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001582:	81a3      	strh	r3, [r4, #12]
 8001584:	2300      	movs	r3, #0
 8001586:	6063      	str	r3, [r4, #4]
 8001588:	6923      	ldr	r3, [r4, #16]
 800158a:	6023      	str	r3, [r4, #0]
 800158c:	89a3      	ldrh	r3, [r4, #12]
 800158e:	f043 0308 	orr.w	r3, r3, #8
 8001592:	81a3      	strh	r3, [r4, #12]
 8001594:	6923      	ldr	r3, [r4, #16]
 8001596:	b94b      	cbnz	r3, 80015ac <__swsetup_r+0x7c>
 8001598:	89a3      	ldrh	r3, [r4, #12]
 800159a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800159e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015a2:	d003      	beq.n	80015ac <__swsetup_r+0x7c>
 80015a4:	4621      	mov	r1, r4
 80015a6:	4628      	mov	r0, r5
 80015a8:	f000 f850 	bl	800164c <__smakebuf_r>
 80015ac:	89a0      	ldrh	r0, [r4, #12]
 80015ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80015b2:	f010 0301 	ands.w	r3, r0, #1
 80015b6:	d00a      	beq.n	80015ce <__swsetup_r+0x9e>
 80015b8:	2300      	movs	r3, #0
 80015ba:	60a3      	str	r3, [r4, #8]
 80015bc:	6963      	ldr	r3, [r4, #20]
 80015be:	425b      	negs	r3, r3
 80015c0:	61a3      	str	r3, [r4, #24]
 80015c2:	6923      	ldr	r3, [r4, #16]
 80015c4:	b943      	cbnz	r3, 80015d8 <__swsetup_r+0xa8>
 80015c6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80015ca:	d1c4      	bne.n	8001556 <__swsetup_r+0x26>
 80015cc:	bd38      	pop	{r3, r4, r5, pc}
 80015ce:	0781      	lsls	r1, r0, #30
 80015d0:	bf58      	it	pl
 80015d2:	6963      	ldrpl	r3, [r4, #20]
 80015d4:	60a3      	str	r3, [r4, #8]
 80015d6:	e7f4      	b.n	80015c2 <__swsetup_r+0x92>
 80015d8:	2000      	movs	r0, #0
 80015da:	e7f7      	b.n	80015cc <__swsetup_r+0x9c>
 80015dc:	20000058 	.word	0x20000058

080015e0 <_sbrk_r>:
 80015e0:	b538      	push	{r3, r4, r5, lr}
 80015e2:	4d06      	ldr	r5, [pc, #24]	; (80015fc <_sbrk_r+0x1c>)
 80015e4:	2300      	movs	r3, #0
 80015e6:	4604      	mov	r4, r0
 80015e8:	4608      	mov	r0, r1
 80015ea:	602b      	str	r3, [r5, #0]
 80015ec:	f7ff f8f4 	bl	80007d8 <_sbrk>
 80015f0:	1c43      	adds	r3, r0, #1
 80015f2:	d102      	bne.n	80015fa <_sbrk_r+0x1a>
 80015f4:	682b      	ldr	r3, [r5, #0]
 80015f6:	b103      	cbz	r3, 80015fa <_sbrk_r+0x1a>
 80015f8:	6023      	str	r3, [r4, #0]
 80015fa:	bd38      	pop	{r3, r4, r5, pc}
 80015fc:	200001b8 	.word	0x200001b8

08001600 <__swhatbuf_r>:
 8001600:	b570      	push	{r4, r5, r6, lr}
 8001602:	460c      	mov	r4, r1
 8001604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001608:	2900      	cmp	r1, #0
 800160a:	b096      	sub	sp, #88	; 0x58
 800160c:	4615      	mov	r5, r2
 800160e:	461e      	mov	r6, r3
 8001610:	da0d      	bge.n	800162e <__swhatbuf_r+0x2e>
 8001612:	89a3      	ldrh	r3, [r4, #12]
 8001614:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001618:	f04f 0100 	mov.w	r1, #0
 800161c:	bf0c      	ite	eq
 800161e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001622:	2340      	movne	r3, #64	; 0x40
 8001624:	2000      	movs	r0, #0
 8001626:	6031      	str	r1, [r6, #0]
 8001628:	602b      	str	r3, [r5, #0]
 800162a:	b016      	add	sp, #88	; 0x58
 800162c:	bd70      	pop	{r4, r5, r6, pc}
 800162e:	466a      	mov	r2, sp
 8001630:	f000 f848 	bl	80016c4 <_fstat_r>
 8001634:	2800      	cmp	r0, #0
 8001636:	dbec      	blt.n	8001612 <__swhatbuf_r+0x12>
 8001638:	9901      	ldr	r1, [sp, #4]
 800163a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800163e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001642:	4259      	negs	r1, r3
 8001644:	4159      	adcs	r1, r3
 8001646:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800164a:	e7eb      	b.n	8001624 <__swhatbuf_r+0x24>

0800164c <__smakebuf_r>:
 800164c:	898b      	ldrh	r3, [r1, #12]
 800164e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001650:	079d      	lsls	r5, r3, #30
 8001652:	4606      	mov	r6, r0
 8001654:	460c      	mov	r4, r1
 8001656:	d507      	bpl.n	8001668 <__smakebuf_r+0x1c>
 8001658:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800165c:	6023      	str	r3, [r4, #0]
 800165e:	6123      	str	r3, [r4, #16]
 8001660:	2301      	movs	r3, #1
 8001662:	6163      	str	r3, [r4, #20]
 8001664:	b002      	add	sp, #8
 8001666:	bd70      	pop	{r4, r5, r6, pc}
 8001668:	ab01      	add	r3, sp, #4
 800166a:	466a      	mov	r2, sp
 800166c:	f7ff ffc8 	bl	8001600 <__swhatbuf_r>
 8001670:	9900      	ldr	r1, [sp, #0]
 8001672:	4605      	mov	r5, r0
 8001674:	4630      	mov	r0, r6
 8001676:	f7ff fb0f 	bl	8000c98 <_malloc_r>
 800167a:	b948      	cbnz	r0, 8001690 <__smakebuf_r+0x44>
 800167c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001680:	059a      	lsls	r2, r3, #22
 8001682:	d4ef      	bmi.n	8001664 <__smakebuf_r+0x18>
 8001684:	f023 0303 	bic.w	r3, r3, #3
 8001688:	f043 0302 	orr.w	r3, r3, #2
 800168c:	81a3      	strh	r3, [r4, #12]
 800168e:	e7e3      	b.n	8001658 <__smakebuf_r+0xc>
 8001690:	89a3      	ldrh	r3, [r4, #12]
 8001692:	6020      	str	r0, [r4, #0]
 8001694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001698:	81a3      	strh	r3, [r4, #12]
 800169a:	9b00      	ldr	r3, [sp, #0]
 800169c:	6163      	str	r3, [r4, #20]
 800169e:	9b01      	ldr	r3, [sp, #4]
 80016a0:	6120      	str	r0, [r4, #16]
 80016a2:	b15b      	cbz	r3, 80016bc <__smakebuf_r+0x70>
 80016a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80016a8:	4630      	mov	r0, r6
 80016aa:	f000 f81d 	bl	80016e8 <_isatty_r>
 80016ae:	b128      	cbz	r0, 80016bc <__smakebuf_r+0x70>
 80016b0:	89a3      	ldrh	r3, [r4, #12]
 80016b2:	f023 0303 	bic.w	r3, r3, #3
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	81a3      	strh	r3, [r4, #12]
 80016bc:	89a3      	ldrh	r3, [r4, #12]
 80016be:	431d      	orrs	r5, r3
 80016c0:	81a5      	strh	r5, [r4, #12]
 80016c2:	e7cf      	b.n	8001664 <__smakebuf_r+0x18>

080016c4 <_fstat_r>:
 80016c4:	b538      	push	{r3, r4, r5, lr}
 80016c6:	4d07      	ldr	r5, [pc, #28]	; (80016e4 <_fstat_r+0x20>)
 80016c8:	2300      	movs	r3, #0
 80016ca:	4604      	mov	r4, r0
 80016cc:	4608      	mov	r0, r1
 80016ce:	4611      	mov	r1, r2
 80016d0:	602b      	str	r3, [r5, #0]
 80016d2:	f7ff f858 	bl	8000786 <_fstat>
 80016d6:	1c43      	adds	r3, r0, #1
 80016d8:	d102      	bne.n	80016e0 <_fstat_r+0x1c>
 80016da:	682b      	ldr	r3, [r5, #0]
 80016dc:	b103      	cbz	r3, 80016e0 <_fstat_r+0x1c>
 80016de:	6023      	str	r3, [r4, #0]
 80016e0:	bd38      	pop	{r3, r4, r5, pc}
 80016e2:	bf00      	nop
 80016e4:	200001b8 	.word	0x200001b8

080016e8 <_isatty_r>:
 80016e8:	b538      	push	{r3, r4, r5, lr}
 80016ea:	4d06      	ldr	r5, [pc, #24]	; (8001704 <_isatty_r+0x1c>)
 80016ec:	2300      	movs	r3, #0
 80016ee:	4604      	mov	r4, r0
 80016f0:	4608      	mov	r0, r1
 80016f2:	602b      	str	r3, [r5, #0]
 80016f4:	f7ff f857 	bl	80007a6 <_isatty>
 80016f8:	1c43      	adds	r3, r0, #1
 80016fa:	d102      	bne.n	8001702 <_isatty_r+0x1a>
 80016fc:	682b      	ldr	r3, [r5, #0]
 80016fe:	b103      	cbz	r3, 8001702 <_isatty_r+0x1a>
 8001700:	6023      	str	r3, [r4, #0]
 8001702:	bd38      	pop	{r3, r4, r5, pc}
 8001704:	200001b8 	.word	0x200001b8

08001708 <_init>:
 8001708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800170a:	bf00      	nop
 800170c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800170e:	bc08      	pop	{r3}
 8001710:	469e      	mov	lr, r3
 8001712:	4770      	bx	lr

08001714 <_fini>:
 8001714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001716:	bf00      	nop
 8001718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800171a:	bc08      	pop	{r3}
 800171c:	469e      	mov	lr, r3
 800171e:	4770      	bx	lr
